// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package datastoretest

import (
	"github.com/ONSdigital/dp-dataset-api/models"
	"sync"
)

var (
	lockDataStoreMockGetDataset    sync.RWMutex
	lockDataStoreMockGetDatasets   sync.RWMutex
	lockDataStoreMockGetEdition    sync.RWMutex
	lockDataStoreMockGetEditions   sync.RWMutex
	lockDataStoreMockGetVersion    sync.RWMutex
	lockDataStoreMockGetVersions   sync.RWMutex
	lockDataStoreMockUpsertContact sync.RWMutex
	lockDataStoreMockUpsertDataset sync.RWMutex
	lockDataStoreMockUpsertEdition sync.RWMutex
	lockDataStoreMockUpsertVersion sync.RWMutex
)

// DataStoreMock is a mock implementation of DataStore.
//
//     func TestSomethingThatUsesDataStore(t *testing.T) {
//
//         // make and configure a mocked DataStore
//         mockedDataStore := &DataStoreMock{
//             GetDatasetFunc: func(id string) (*models.Dataset, error) {
// 	               panic("TODO: mock out the GetDataset method")
//             },
//             GetDatasetsFunc: func() (*models.DatasetResults, error) {
// 	               panic("TODO: mock out the GetDatasets method")
//             },
//             GetEditionFunc: func(datasetID string, editionID string) (*models.Edition, error) {
// 	               panic("TODO: mock out the GetEdition method")
//             },
//             GetEditionsFunc: func(id string) (*models.EditionResults, error) {
// 	               panic("TODO: mock out the GetEditions method")
//             },
//             GetVersionFunc: func(datasetID string, editionID string, versionID string) (*models.Version, error) {
// 	               panic("TODO: mock out the GetVersion method")
//             },
//             GetVersionsFunc: func(datasetID string, editionID string) (*models.VersionResults, error) {
// 	               panic("TODO: mock out the GetVersions method")
//             },
//             UpsertContactFunc: func(id interface{}, update interface{}) error {
// 	               panic("TODO: mock out the UpsertContact method")
//             },
//             UpsertDatasetFunc: func(id interface{}, update interface{}) error {
// 	               panic("TODO: mock out the UpsertDataset method")
//             },
//             UpsertEditionFunc: func(id interface{}, update interface{}) error {
// 	               panic("TODO: mock out the UpsertEdition method")
//             },
//             UpsertVersionFunc: func(id interface{}, update interface{}) error {
// 	               panic("TODO: mock out the UpsertVersion method")
//             },
//         }
//
//         // TODO: use mockedDataStore in code that requires DataStore
//         //       and then make assertions.
//
//     }
type DataStoreMock struct {
	// GetDatasetFunc mocks the GetDataset method.
	GetDatasetFunc func(id string) (*models.Dataset, error)

	// GetDatasetsFunc mocks the GetDatasets method.
	GetDatasetsFunc func() (*models.DatasetResults, error)

	// GetEditionFunc mocks the GetEdition method.
	GetEditionFunc func(datasetID string, editionID string) (*models.Edition, error)

	// GetEditionsFunc mocks the GetEditions method.
	GetEditionsFunc func(id string) (*models.EditionResults, error)

	// GetVersionFunc mocks the GetVersion method.
	GetVersionFunc func(datasetID string, editionID string, versionID string) (*models.Version, error)

	// GetVersionsFunc mocks the GetVersions method.
	GetVersionsFunc func(datasetID string, editionID string) (*models.VersionResults, error)

	// UpsertContactFunc mocks the UpsertContact method.
	UpsertContactFunc func(id interface{}, update interface{}) error

	// UpsertDatasetFunc mocks the UpsertDataset method.
	UpsertDatasetFunc func(id interface{}, update interface{}) error

	// UpsertEditionFunc mocks the UpsertEdition method.
	UpsertEditionFunc func(id interface{}, update interface{}) error

	// UpsertVersionFunc mocks the UpsertVersion method.
	UpsertVersionFunc func(id interface{}, update interface{}) error

	// calls tracks calls to the methods.
	calls struct {
		// GetDataset holds details about calls to the GetDataset method.
		GetDataset []struct {
			// Id is the id argument value.
			Id string
		}
		// GetDatasets holds details about calls to the GetDatasets method.
		GetDatasets []struct {
		}
		// GetEdition holds details about calls to the GetEdition method.
		GetEdition []struct {
			// DatasetID is the datasetID argument value.
			DatasetID string
			// EditionID is the editionID argument value.
			EditionID string
		}
		// GetEditions holds details about calls to the GetEditions method.
		GetEditions []struct {
			// Id is the id argument value.
			Id string
		}
		// GetVersion holds details about calls to the GetVersion method.
		GetVersion []struct {
			// DatasetID is the datasetID argument value.
			DatasetID string
			// EditionID is the editionID argument value.
			EditionID string
			// VersionID is the versionID argument value.
			VersionID string
		}
		// GetVersions holds details about calls to the GetVersions method.
		GetVersions []struct {
			// DatasetID is the datasetID argument value.
			DatasetID string
			// EditionID is the editionID argument value.
			EditionID string
		}
		// UpsertContact holds details about calls to the UpsertContact method.
		UpsertContact []struct {
			// Id is the id argument value.
			Id interface{}
			// Update is the update argument value.
			Update interface{}
		}
		// UpsertDataset holds details about calls to the UpsertDataset method.
		UpsertDataset []struct {
			// Id is the id argument value.
			Id interface{}
			// Update is the update argument value.
			Update interface{}
		}
		// UpsertEdition holds details about calls to the UpsertEdition method.
		UpsertEdition []struct {
			// Id is the id argument value.
			Id interface{}
			// Update is the update argument value.
			Update interface{}
		}
		// UpsertVersion holds details about calls to the UpsertVersion method.
		UpsertVersion []struct {
			// Id is the id argument value.
			Id interface{}
			// Update is the update argument value.
			Update interface{}
		}
	}
}

// GetDataset calls GetDatasetFunc.
func (mock *DataStoreMock) GetDataset(id string) (*models.Dataset, error) {
	if mock.GetDatasetFunc == nil {
		panic("moq: DataStoreMock.GetDatasetFunc is nil but DataStore.GetDataset was just called")
	}
	callInfo := struct {
		Id string
	}{
		Id: id,
	}
	lockDataStoreMockGetDataset.Lock()
	mock.calls.GetDataset = append(mock.calls.GetDataset, callInfo)
	lockDataStoreMockGetDataset.Unlock()
	return mock.GetDatasetFunc(id)
}

// GetDatasetCalls gets all the calls that were made to GetDataset.
// Check the length with:
//     len(mockedDataStore.GetDatasetCalls())
func (mock *DataStoreMock) GetDatasetCalls() []struct {
	Id string
} {
	var calls []struct {
		Id string
	}
	lockDataStoreMockGetDataset.RLock()
	calls = mock.calls.GetDataset
	lockDataStoreMockGetDataset.RUnlock()
	return calls
}

// GetDatasets calls GetDatasetsFunc.
func (mock *DataStoreMock) GetDatasets() (*models.DatasetResults, error) {
	if mock.GetDatasetsFunc == nil {
		panic("moq: DataStoreMock.GetDatasetsFunc is nil but DataStore.GetDatasets was just called")
	}
	callInfo := struct {
	}{}
	lockDataStoreMockGetDatasets.Lock()
	mock.calls.GetDatasets = append(mock.calls.GetDatasets, callInfo)
	lockDataStoreMockGetDatasets.Unlock()
	return mock.GetDatasetsFunc()
}

// GetDatasetsCalls gets all the calls that were made to GetDatasets.
// Check the length with:
//     len(mockedDataStore.GetDatasetsCalls())
func (mock *DataStoreMock) GetDatasetsCalls() []struct {
} {
	var calls []struct {
	}
	lockDataStoreMockGetDatasets.RLock()
	calls = mock.calls.GetDatasets
	lockDataStoreMockGetDatasets.RUnlock()
	return calls
}

// GetEdition calls GetEditionFunc.
func (mock *DataStoreMock) GetEdition(datasetID string, editionID string) (*models.Edition, error) {
	if mock.GetEditionFunc == nil {
		panic("moq: DataStoreMock.GetEditionFunc is nil but DataStore.GetEdition was just called")
	}
	callInfo := struct {
		DatasetID string
		EditionID string
	}{
		DatasetID: datasetID,
		EditionID: editionID,
	}
	lockDataStoreMockGetEdition.Lock()
	mock.calls.GetEdition = append(mock.calls.GetEdition, callInfo)
	lockDataStoreMockGetEdition.Unlock()
	return mock.GetEditionFunc(datasetID, editionID)
}

// GetEditionCalls gets all the calls that were made to GetEdition.
// Check the length with:
//     len(mockedDataStore.GetEditionCalls())
func (mock *DataStoreMock) GetEditionCalls() []struct {
	DatasetID string
	EditionID string
} {
	var calls []struct {
		DatasetID string
		EditionID string
	}
	lockDataStoreMockGetEdition.RLock()
	calls = mock.calls.GetEdition
	lockDataStoreMockGetEdition.RUnlock()
	return calls
}

// GetEditions calls GetEditionsFunc.
func (mock *DataStoreMock) GetEditions(id string) (*models.EditionResults, error) {
	if mock.GetEditionsFunc == nil {
		panic("moq: DataStoreMock.GetEditionsFunc is nil but DataStore.GetEditions was just called")
	}
	callInfo := struct {
		Id string
	}{
		Id: id,
	}
	lockDataStoreMockGetEditions.Lock()
	mock.calls.GetEditions = append(mock.calls.GetEditions, callInfo)
	lockDataStoreMockGetEditions.Unlock()
	return mock.GetEditionsFunc(id)
}

// GetEditionsCalls gets all the calls that were made to GetEditions.
// Check the length with:
//     len(mockedDataStore.GetEditionsCalls())
func (mock *DataStoreMock) GetEditionsCalls() []struct {
	Id string
} {
	var calls []struct {
		Id string
	}
	lockDataStoreMockGetEditions.RLock()
	calls = mock.calls.GetEditions
	lockDataStoreMockGetEditions.RUnlock()
	return calls
}

// GetVersion calls GetVersionFunc.
func (mock *DataStoreMock) GetVersion(datasetID string, editionID string, versionID string) (*models.Version, error) {
	if mock.GetVersionFunc == nil {
		panic("moq: DataStoreMock.GetVersionFunc is nil but DataStore.GetVersion was just called")
	}
	callInfo := struct {
		DatasetID string
		EditionID string
		VersionID string
	}{
		DatasetID: datasetID,
		EditionID: editionID,
		VersionID: versionID,
	}
	lockDataStoreMockGetVersion.Lock()
	mock.calls.GetVersion = append(mock.calls.GetVersion, callInfo)
	lockDataStoreMockGetVersion.Unlock()
	return mock.GetVersionFunc(datasetID, editionID, versionID)
}

// GetVersionCalls gets all the calls that were made to GetVersion.
// Check the length with:
//     len(mockedDataStore.GetVersionCalls())
func (mock *DataStoreMock) GetVersionCalls() []struct {
	DatasetID string
	EditionID string
	VersionID string
} {
	var calls []struct {
		DatasetID string
		EditionID string
		VersionID string
	}
	lockDataStoreMockGetVersion.RLock()
	calls = mock.calls.GetVersion
	lockDataStoreMockGetVersion.RUnlock()
	return calls
}

// GetVersions calls GetVersionsFunc.
func (mock *DataStoreMock) GetVersions(datasetID string, editionID string) (*models.VersionResults, error) {
	if mock.GetVersionsFunc == nil {
		panic("moq: DataStoreMock.GetVersionsFunc is nil but DataStore.GetVersions was just called")
	}
	callInfo := struct {
		DatasetID string
		EditionID string
	}{
		DatasetID: datasetID,
		EditionID: editionID,
	}
	lockDataStoreMockGetVersions.Lock()
	mock.calls.GetVersions = append(mock.calls.GetVersions, callInfo)
	lockDataStoreMockGetVersions.Unlock()
	return mock.GetVersionsFunc(datasetID, editionID)
}

// GetVersionsCalls gets all the calls that were made to GetVersions.
// Check the length with:
//     len(mockedDataStore.GetVersionsCalls())
func (mock *DataStoreMock) GetVersionsCalls() []struct {
	DatasetID string
	EditionID string
} {
	var calls []struct {
		DatasetID string
		EditionID string
	}
	lockDataStoreMockGetVersions.RLock()
	calls = mock.calls.GetVersions
	lockDataStoreMockGetVersions.RUnlock()
	return calls
}

// UpsertContact calls UpsertContactFunc.
func (mock *DataStoreMock) UpsertContact(id interface{}, update interface{}) error {
	if mock.UpsertContactFunc == nil {
		panic("moq: DataStoreMock.UpsertContactFunc is nil but DataStore.UpsertContact was just called")
	}
	callInfo := struct {
		Id     interface{}
		Update interface{}
	}{
		Id:     id,
		Update: update,
	}
	lockDataStoreMockUpsertContact.Lock()
	mock.calls.UpsertContact = append(mock.calls.UpsertContact, callInfo)
	lockDataStoreMockUpsertContact.Unlock()
	return mock.UpsertContactFunc(id, update)
}

// UpsertContactCalls gets all the calls that were made to UpsertContact.
// Check the length with:
//     len(mockedDataStore.UpsertContactCalls())
func (mock *DataStoreMock) UpsertContactCalls() []struct {
	Id     interface{}
	Update interface{}
} {
	var calls []struct {
		Id     interface{}
		Update interface{}
	}
	lockDataStoreMockUpsertContact.RLock()
	calls = mock.calls.UpsertContact
	lockDataStoreMockUpsertContact.RUnlock()
	return calls
}

// UpsertDataset calls UpsertDatasetFunc.
func (mock *DataStoreMock) UpsertDataset(id interface{}, update interface{}) error {
	if mock.UpsertDatasetFunc == nil {
		panic("moq: DataStoreMock.UpsertDatasetFunc is nil but DataStore.UpsertDataset was just called")
	}
	callInfo := struct {
		Id     interface{}
		Update interface{}
	}{
		Id:     id,
		Update: update,
	}
	lockDataStoreMockUpsertDataset.Lock()
	mock.calls.UpsertDataset = append(mock.calls.UpsertDataset, callInfo)
	lockDataStoreMockUpsertDataset.Unlock()
	return mock.UpsertDatasetFunc(id, update)
}

// UpsertDatasetCalls gets all the calls that were made to UpsertDataset.
// Check the length with:
//     len(mockedDataStore.UpsertDatasetCalls())
func (mock *DataStoreMock) UpsertDatasetCalls() []struct {
	Id     interface{}
	Update interface{}
} {
	var calls []struct {
		Id     interface{}
		Update interface{}
	}
	lockDataStoreMockUpsertDataset.RLock()
	calls = mock.calls.UpsertDataset
	lockDataStoreMockUpsertDataset.RUnlock()
	return calls
}

// UpsertEdition calls UpsertEditionFunc.
func (mock *DataStoreMock) UpsertEdition(id interface{}, update interface{}) error {
	if mock.UpsertEditionFunc == nil {
		panic("moq: DataStoreMock.UpsertEditionFunc is nil but DataStore.UpsertEdition was just called")
	}
	callInfo := struct {
		Id     interface{}
		Update interface{}
	}{
		Id:     id,
		Update: update,
	}
	lockDataStoreMockUpsertEdition.Lock()
	mock.calls.UpsertEdition = append(mock.calls.UpsertEdition, callInfo)
	lockDataStoreMockUpsertEdition.Unlock()
	return mock.UpsertEditionFunc(id, update)
}

// UpsertEditionCalls gets all the calls that were made to UpsertEdition.
// Check the length with:
//     len(mockedDataStore.UpsertEditionCalls())
func (mock *DataStoreMock) UpsertEditionCalls() []struct {
	Id     interface{}
	Update interface{}
} {
	var calls []struct {
		Id     interface{}
		Update interface{}
	}
	lockDataStoreMockUpsertEdition.RLock()
	calls = mock.calls.UpsertEdition
	lockDataStoreMockUpsertEdition.RUnlock()
	return calls
}

// UpsertVersion calls UpsertVersionFunc.
func (mock *DataStoreMock) UpsertVersion(id interface{}, update interface{}) error {
	if mock.UpsertVersionFunc == nil {
		panic("moq: DataStoreMock.UpsertVersionFunc is nil but DataStore.UpsertVersion was just called")
	}
	callInfo := struct {
		Id     interface{}
		Update interface{}
	}{
		Id:     id,
		Update: update,
	}
	lockDataStoreMockUpsertVersion.Lock()
	mock.calls.UpsertVersion = append(mock.calls.UpsertVersion, callInfo)
	lockDataStoreMockUpsertVersion.Unlock()
	return mock.UpsertVersionFunc(id, update)
}

// UpsertVersionCalls gets all the calls that were made to UpsertVersion.
// Check the length with:
//     len(mockedDataStore.UpsertVersionCalls())
func (mock *DataStoreMock) UpsertVersionCalls() []struct {
	Id     interface{}
	Update interface{}
} {
	var calls []struct {
		Id     interface{}
		Update interface{}
	}
	lockDataStoreMockUpsertVersion.RLock()
	calls = mock.calls.UpsertVersion
	lockDataStoreMockUpsertVersion.RUnlock()
	return calls
}
