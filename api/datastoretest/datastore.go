// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package backendtest

import (
	"github.com/ONSdigital/dp-dataset-api/models"
	"sync"
)

var (
	lockBackendMockGetDataset     sync.RWMutex
	lockBackendMockGetDatasets    sync.RWMutex
	lockBackendMockGetEdition     sync.RWMutex
	lockBackendMockGetEditions    sync.RWMutex
	lockBackendMockGetNextVersion sync.RWMutex
	lockBackendMockGetVersion     sync.RWMutex
	lockBackendMockGetVersions    sync.RWMutex
	lockBackendMockUpsertContact  sync.RWMutex
	lockBackendMockUpsertDataset  sync.RWMutex
	lockBackendMockUpsertEdition  sync.RWMutex
	lockBackendMockUpsertVersion  sync.RWMutex
)

// BackendMock is a mock implementation of Backend.
//
//     func TestSomethingThatUsesBackend(t *testing.T) {
//
//         // make and configure a mocked Backend
//         mockedBackend := &BackendMock{
//             GetDatasetFunc: func(id string) (*models.Dataset, error) {
// 	               panic("TODO: mock out the GetDataset method")
//             },
//             GetDatasetsFunc: func() (*models.DatasetResults, error) {
// 	               panic("TODO: mock out the GetDatasets method")
//             },
//             GetEditionFunc: func(datasetID string, editionID string) (*models.Edition, error) {
// 	               panic("TODO: mock out the GetEdition method")
//             },
//             GetEditionsFunc: func(id string) (*models.EditionResults, error) {
// 	               panic("TODO: mock out the GetEditions method")
//             },
//             GetNextVersionFunc: func(datasetID string, editionID string) (int, error) {
// 	               panic("TODO: mock out the GetNextVersion method")
//             },
//             GetVersionFunc: func(datasetID string, editionID string, versionID string) (*models.Version, error) {
// 	               panic("TODO: mock out the GetVersion method")
//             },
//             GetVersionsFunc: func(datasetID string, editionID string) (*models.VersionResults, error) {
// 	               panic("TODO: mock out the GetVersions method")
//             },
//             UpsertContactFunc: func(id string, update interface{}) error {
// 	               panic("TODO: mock out the UpsertContact method")
//             },
//             UpsertDatasetFunc: func(id string, update interface{}) error {
// 	               panic("TODO: mock out the UpsertDataset method")
//             },
//             UpsertEditionFunc: func(id string, update interface{}) error {
// 	               panic("TODO: mock out the UpsertEdition method")
//             },
//             UpsertVersionFunc: func(id string, update interface{}) error {
// 	               panic("TODO: mock out the UpsertVersion method")
//             },
//         }
//
//         // TODO: use mockedBackend in code that requires Backend
//         //       and then make assertions.
//
//     }
type BackendMock struct {
	// GetDatasetFunc mocks the GetDataset method.
	GetDatasetFunc func(id string) (*models.Dataset, error)

	// GetDatasetsFunc mocks the GetDatasets method.
	GetDatasetsFunc func() (*models.DatasetResults, error)

	// GetEditionFunc mocks the GetEdition method.
	GetEditionFunc func(datasetID string, editionID string) (*models.Edition, error)

	// GetEditionsFunc mocks the GetEditions method.
	GetEditionsFunc func(id string) (*models.EditionResults, error)

	// GetNextVersionFunc mocks the GetNextVersion method.
	GetNextVersionFunc func(datasetID string, editionID string) (int, error)

	// GetVersionFunc mocks the GetVersion method.
	GetVersionFunc func(datasetID string, editionID string, versionID string) (*models.Version, error)

	// GetVersionsFunc mocks the GetVersions method.
	GetVersionsFunc func(datasetID string, editionID string) (*models.VersionResults, error)

	// UpsertContactFunc mocks the UpsertContact method.
	UpsertContactFunc func(id string, update interface{}) error

	// UpsertDatasetFunc mocks the UpsertDataset method.
	UpsertDatasetFunc func(id string, update interface{}) error

	// UpsertEditionFunc mocks the UpsertEdition method.
	UpsertEditionFunc func(id string, update interface{}) error

	// UpsertVersionFunc mocks the UpsertVersion method.
	UpsertVersionFunc func(id string, update interface{}) error

	// calls tracks calls to the methods.
	calls struct {
		// GetDataset holds details about calls to the GetDataset method.
		GetDataset []struct {
			// Id is the id argument value.
			Id string
		}
		// GetDatasets holds details about calls to the GetDatasets method.
		GetDatasets []struct {
		}
		// GetEdition holds details about calls to the GetEdition method.
		GetEdition []struct {
			// DatasetID is the datasetID argument value.
			DatasetID string
			// EditionID is the editionID argument value.
			EditionID string
		}
		// GetEditions holds details about calls to the GetEditions method.
		GetEditions []struct {
			// Id is the id argument value.
			Id string
		}
		// GetNextVersion holds details about calls to the GetNextVersion method.
		GetNextVersion []struct {
			// DatasetID is the datasetID argument value.
			DatasetID string
			// EditionID is the editionID argument value.
			EditionID string
		}
		// GetVersion holds details about calls to the GetVersion method.
		GetVersion []struct {
			// DatasetID is the datasetID argument value.
			DatasetID string
			// EditionID is the editionID argument value.
			EditionID string
			// VersionID is the versionID argument value.
			VersionID string
		}
		// GetVersions holds details about calls to the GetVersions method.
		GetVersions []struct {
			// DatasetID is the datasetID argument value.
			DatasetID string
			// EditionID is the editionID argument value.
			EditionID string
		}
		// UpsertContact holds details about calls to the UpsertContact method.
		UpsertContact []struct {
			// Id is the id argument value.
			Id string
			// Update is the update argument value.
			Update interface{}
		}
		// UpsertDataset holds details about calls to the UpsertDataset method.
		UpsertDataset []struct {
			// Id is the id argument value.
			Id string
			// Update is the update argument value.
			Update interface{}
		}
		// UpsertEdition holds details about calls to the UpsertEdition method.
		UpsertEdition []struct {
			// Id is the id argument value.
			Id string
			// Update is the update argument value.
			Update interface{}
		}
		// UpsertVersion holds details about calls to the UpsertVersion method.
		UpsertVersion []struct {
			// Id is the id argument value.
			Id string
			// Update is the update argument value.
			Update interface{}
		}
	}
}

// GetDataset calls GetDatasetFunc.
func (mock *BackendMock) GetDataset(id string) (*models.Dataset, error) {
	if mock.GetDatasetFunc == nil {
		panic("moq: BackendMock.GetDatasetFunc is nil but Backend.GetDataset was just called")
	}
	callInfo := struct {
		Id string
	}{
		Id: id,
	}
	lockBackendMockGetDataset.Lock()
	mock.calls.GetDataset = append(mock.calls.GetDataset, callInfo)
	lockBackendMockGetDataset.Unlock()
	return mock.GetDatasetFunc(id)
}

// GetDatasetCalls gets all the calls that were made to GetDataset.
// Check the length with:
//     len(mockedBackend.GetDatasetCalls())
func (mock *BackendMock) GetDatasetCalls() []struct {
	Id string
} {
	var calls []struct {
		Id string
	}
	lockBackendMockGetDataset.RLock()
	calls = mock.calls.GetDataset
	lockBackendMockGetDataset.RUnlock()
	return calls
}

// GetDatasets calls GetDatasetsFunc.
func (mock *BackendMock) GetDatasets() (*models.DatasetResults, error) {
	if mock.GetDatasetsFunc == nil {
		panic("moq: BackendMock.GetDatasetsFunc is nil but Backend.GetDatasets was just called")
	}
	callInfo := struct {
	}{}
	lockBackendMockGetDatasets.Lock()
	mock.calls.GetDatasets = append(mock.calls.GetDatasets, callInfo)
	lockBackendMockGetDatasets.Unlock()
	return mock.GetDatasetsFunc()
}

// GetDatasetsCalls gets all the calls that were made to GetDatasets.
// Check the length with:
//     len(mockedBackend.GetDatasetsCalls())
func (mock *BackendMock) GetDatasetsCalls() []struct {
} {
	var calls []struct {
	}
	lockBackendMockGetDatasets.RLock()
	calls = mock.calls.GetDatasets
	lockBackendMockGetDatasets.RUnlock()
	return calls
}

// GetEdition calls GetEditionFunc.
func (mock *BackendMock) GetEdition(datasetID string, editionID string) (*models.Edition, error) {
	if mock.GetEditionFunc == nil {
		panic("moq: BackendMock.GetEditionFunc is nil but Backend.GetEdition was just called")
	}
	callInfo := struct {
		DatasetID string
		EditionID string
	}{
		DatasetID: datasetID,
		EditionID: editionID,
	}
	lockBackendMockGetEdition.Lock()
	mock.calls.GetEdition = append(mock.calls.GetEdition, callInfo)
	lockBackendMockGetEdition.Unlock()
	return mock.GetEditionFunc(datasetID, editionID)
}

// GetEditionCalls gets all the calls that were made to GetEdition.
// Check the length with:
//     len(mockedBackend.GetEditionCalls())
func (mock *BackendMock) GetEditionCalls() []struct {
	DatasetID string
	EditionID string
} {
	var calls []struct {
		DatasetID string
		EditionID string
	}
	lockBackendMockGetEdition.RLock()
	calls = mock.calls.GetEdition
	lockBackendMockGetEdition.RUnlock()
	return calls
}

// GetEditions calls GetEditionsFunc.
func (mock *BackendMock) GetEditions(id string) (*models.EditionResults, error) {
	if mock.GetEditionsFunc == nil {
		panic("moq: BackendMock.GetEditionsFunc is nil but Backend.GetEditions was just called")
	}
	callInfo := struct {
		Id string
	}{
		Id: id,
	}
	lockBackendMockGetEditions.Lock()
	mock.calls.GetEditions = append(mock.calls.GetEditions, callInfo)
	lockBackendMockGetEditions.Unlock()
	return mock.GetEditionsFunc(id)
}

// GetEditionsCalls gets all the calls that were made to GetEditions.
// Check the length with:
//     len(mockedBackend.GetEditionsCalls())
func (mock *BackendMock) GetEditionsCalls() []struct {
	Id string
} {
	var calls []struct {
		Id string
	}
	lockBackendMockGetEditions.RLock()
	calls = mock.calls.GetEditions
	lockBackendMockGetEditions.RUnlock()
	return calls
}

// GetNextVersion calls GetNextVersionFunc.
func (mock *BackendMock) GetNextVersion(datasetID string, editionID string) (int, error) {
	if mock.GetNextVersionFunc == nil {
		panic("moq: BackendMock.GetNextVersionFunc is nil but Backend.GetNextVersion was just called")
	}
	callInfo := struct {
		DatasetID string
		EditionID string
	}{
		DatasetID: datasetID,
		EditionID: editionID,
	}
	lockBackendMockGetNextVersion.Lock()
	mock.calls.GetNextVersion = append(mock.calls.GetNextVersion, callInfo)
	lockBackendMockGetNextVersion.Unlock()
	return mock.GetNextVersionFunc(datasetID, editionID)
}

// GetNextVersionCalls gets all the calls that were made to GetNextVersion.
// Check the length with:
//     len(mockedBackend.GetNextVersionCalls())
func (mock *BackendMock) GetNextVersionCalls() []struct {
	DatasetID string
	EditionID string
} {
	var calls []struct {
		DatasetID string
		EditionID string
	}
	lockBackendMockGetNextVersion.RLock()
	calls = mock.calls.GetNextVersion
	lockBackendMockGetNextVersion.RUnlock()
	return calls
}

// GetVersion calls GetVersionFunc.
func (mock *BackendMock) GetVersion(datasetID string, editionID string, versionID string) (*models.Version, error) {
	if mock.GetVersionFunc == nil {
		panic("moq: BackendMock.GetVersionFunc is nil but Backend.GetVersion was just called")
	}
	callInfo := struct {
		DatasetID string
		EditionID string
		VersionID string
	}{
		DatasetID: datasetID,
		EditionID: editionID,
		VersionID: versionID,
	}
	lockBackendMockGetVersion.Lock()
	mock.calls.GetVersion = append(mock.calls.GetVersion, callInfo)
	lockBackendMockGetVersion.Unlock()
	return mock.GetVersionFunc(datasetID, editionID, versionID)
}

// GetVersionCalls gets all the calls that were made to GetVersion.
// Check the length with:
//     len(mockedBackend.GetVersionCalls())
func (mock *BackendMock) GetVersionCalls() []struct {
	DatasetID string
	EditionID string
	VersionID string
} {
	var calls []struct {
		DatasetID string
		EditionID string
		VersionID string
	}
	lockBackendMockGetVersion.RLock()
	calls = mock.calls.GetVersion
	lockBackendMockGetVersion.RUnlock()
	return calls
}

// GetVersions calls GetVersionsFunc.
func (mock *BackendMock) GetVersions(datasetID string, editionID string) (*models.VersionResults, error) {
	if mock.GetVersionsFunc == nil {
		panic("moq: BackendMock.GetVersionsFunc is nil but Backend.GetVersions was just called")
	}
	callInfo := struct {
		DatasetID string
		EditionID string
	}{
		DatasetID: datasetID,
		EditionID: editionID,
	}
	lockBackendMockGetVersions.Lock()
	mock.calls.GetVersions = append(mock.calls.GetVersions, callInfo)
	lockBackendMockGetVersions.Unlock()
	return mock.GetVersionsFunc(datasetID, editionID)
}

// GetVersionsCalls gets all the calls that were made to GetVersions.
// Check the length with:
//     len(mockedBackend.GetVersionsCalls())
func (mock *BackendMock) GetVersionsCalls() []struct {
	DatasetID string
	EditionID string
} {
	var calls []struct {
		DatasetID string
		EditionID string
	}
	lockBackendMockGetVersions.RLock()
	calls = mock.calls.GetVersions
	lockBackendMockGetVersions.RUnlock()
	return calls
}

// UpsertContact calls UpsertContactFunc.
func (mock *BackendMock) UpsertContact(id string, update interface{}) error {
	if mock.UpsertContactFunc == nil {
		panic("moq: BackendMock.UpsertContactFunc is nil but Backend.UpsertContact was just called")
	}
	callInfo := struct {
		Id     string
		Update interface{}
	}{
		Id:     id,
		Update: update,
	}
	lockBackendMockUpsertContact.Lock()
	mock.calls.UpsertContact = append(mock.calls.UpsertContact, callInfo)
	lockBackendMockUpsertContact.Unlock()
	return mock.UpsertContactFunc(id, update)
}

// UpsertContactCalls gets all the calls that were made to UpsertContact.
// Check the length with:
//     len(mockedBackend.UpsertContactCalls())
func (mock *BackendMock) UpsertContactCalls() []struct {
	Id     string
	Update interface{}
} {
	var calls []struct {
		Id     string
		Update interface{}
	}
	lockBackendMockUpsertContact.RLock()
	calls = mock.calls.UpsertContact
	lockBackendMockUpsertContact.RUnlock()
	return calls
}

// UpsertDataset calls UpsertDatasetFunc.
func (mock *BackendMock) UpsertDataset(id string, update interface{}) error {
	if mock.UpsertDatasetFunc == nil {
		panic("moq: BackendMock.UpsertDatasetFunc is nil but Backend.UpsertDataset was just called")
	}
	callInfo := struct {
		Id     string
		Update interface{}
	}{
		Id:     id,
		Update: update,
	}
	lockBackendMockUpsertDataset.Lock()
	mock.calls.UpsertDataset = append(mock.calls.UpsertDataset, callInfo)
	lockBackendMockUpsertDataset.Unlock()
	return mock.UpsertDatasetFunc(id, update)
}

// UpsertDatasetCalls gets all the calls that were made to UpsertDataset.
// Check the length with:
//     len(mockedBackend.UpsertDatasetCalls())
func (mock *BackendMock) UpsertDatasetCalls() []struct {
	Id     string
	Update interface{}
} {
	var calls []struct {
		Id     string
		Update interface{}
	}
	lockBackendMockUpsertDataset.RLock()
	calls = mock.calls.UpsertDataset
	lockBackendMockUpsertDataset.RUnlock()
	return calls
}

// UpsertEdition calls UpsertEditionFunc.
func (mock *BackendMock) UpsertEdition(id string, update interface{}) error {
	if mock.UpsertEditionFunc == nil {
		panic("moq: BackendMock.UpsertEditionFunc is nil but Backend.UpsertEdition was just called")
	}
	callInfo := struct {
		Id     string
		Update interface{}
	}{
		Id:     id,
		Update: update,
	}
	lockBackendMockUpsertEdition.Lock()
	mock.calls.UpsertEdition = append(mock.calls.UpsertEdition, callInfo)
	lockBackendMockUpsertEdition.Unlock()
	return mock.UpsertEditionFunc(id, update)
}

// UpsertEditionCalls gets all the calls that were made to UpsertEdition.
// Check the length with:
//     len(mockedBackend.UpsertEditionCalls())
func (mock *BackendMock) UpsertEditionCalls() []struct {
	Id     string
	Update interface{}
} {
	var calls []struct {
		Id     string
		Update interface{}
	}
	lockBackendMockUpsertEdition.RLock()
	calls = mock.calls.UpsertEdition
	lockBackendMockUpsertEdition.RUnlock()
	return calls
}

// UpsertVersion calls UpsertVersionFunc.
func (mock *BackendMock) UpsertVersion(id string, update interface{}) error {
	if mock.UpsertVersionFunc == nil {
		panic("moq: BackendMock.UpsertVersionFunc is nil but Backend.UpsertVersion was just called")
	}
	callInfo := struct {
		Id     string
		Update interface{}
	}{
		Id:     id,
		Update: update,
	}
	lockBackendMockUpsertVersion.Lock()
	mock.calls.UpsertVersion = append(mock.calls.UpsertVersion, callInfo)
	lockBackendMockUpsertVersion.Unlock()
	return mock.UpsertVersionFunc(id, update)
}

// UpsertVersionCalls gets all the calls that were made to UpsertVersion.
// Check the length with:
//     len(mockedBackend.UpsertVersionCalls())
func (mock *BackendMock) UpsertVersionCalls() []struct {
	Id     string
	Update interface{}
} {
	var calls []struct {
		Id     string
		Update interface{}
	}
	lockBackendMockUpsertVersion.RLock()
	calls = mock.calls.UpsertVersion
	lockBackendMockUpsertVersion.RUnlock()
	return calls
}
