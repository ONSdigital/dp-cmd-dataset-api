// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package api

import (
	"sync"
)

var (
	lockDownloadGeneratorMockGenerateDatasetDownloads sync.RWMutex
)

// DownloadGeneratorMock is a mock implementation of DownloadGenerator.
//
//     func TestSomethingThatUsesDownloadGenerator(t *testing.T) {
//
//         // make and configure a mocked DownloadGenerator
//         mockedDownloadGenerator := &DownloadGeneratorMock{
//             GenerateDatasetDownloadsFunc: func(datasetID string, edition string, versionID string, version string) error {
// 	               panic("TODO: mock out the GenerateDatasetDownloads method")
//             },
//         }
//
//         // TODO: use mockedDownloadGenerator in code that requires DownloadGenerator
//         //       and then make assertions.
//
//     }
type DownloadGeneratorMock struct {
	// GenerateDatasetDownloadsFunc mocks the GenerateDatasetDownloads method.
	GenerateDatasetDownloadsFunc func(datasetID string, edition string, versionID string, version string) error

	// calls tracks calls to the methods.
	calls struct {
		// GenerateDatasetDownloads holds details about calls to the GenerateDatasetDownloads method.
		GenerateDatasetDownloads []struct {
			// DatasetID is the datasetID argument value.
			DatasetID string
			// Edition is the edition argument value.
			Edition string
			// VersionID is the versionID argument value.
			VersionID string
			// Version is the version argument value.
			Version string
		}
	}
}

// GenerateDatasetDownloads calls GenerateDatasetDownloadsFunc.
func (mock *DownloadGeneratorMock) GenerateDatasetDownloads(datasetID string, edition string, versionID string, version string) error {
	if mock.GenerateDatasetDownloadsFunc == nil {
		panic("moq: DownloadGeneratorMock.GenerateDatasetDownloadsFunc is nil but DownloadGenerator.GenerateDatasetDownloads was just called")
	}
	callInfo := struct {
		DatasetID string
		Edition   string
		VersionID string
		Version   string
	}{
		DatasetID: datasetID,
		Edition:   edition,
		VersionID: versionID,
		Version:   version,
	}
	lockDownloadGeneratorMockGenerateDatasetDownloads.Lock()
	mock.calls.GenerateDatasetDownloads = append(mock.calls.GenerateDatasetDownloads, callInfo)
	lockDownloadGeneratorMockGenerateDatasetDownloads.Unlock()
	return mock.GenerateDatasetDownloadsFunc(datasetID, edition, versionID, version)
}

// GenerateDatasetDownloadsCalls gets all the calls that were made to GenerateDatasetDownloads.
// Check the length with:
//     len(mockedDownloadGenerator.GenerateDatasetDownloadsCalls())
func (mock *DownloadGeneratorMock) GenerateDatasetDownloadsCalls() []struct {
	DatasetID string
	Edition   string
	VersionID string
	Version   string
} {
	var calls []struct {
		DatasetID string
		Edition   string
		VersionID string
		Version   string
	}
	lockDownloadGeneratorMockGenerateDatasetDownloads.RLock()
	calls = mock.calls.GenerateDatasetDownloads
	lockDownloadGeneratorMockGenerateDatasetDownloads.RUnlock()
	return calls
}
