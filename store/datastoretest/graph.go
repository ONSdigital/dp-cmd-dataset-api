// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package storetest

import (
	"context"
	"github.com/ONSdigital/dp-dataset-api/store"
	"github.com/ONSdigital/dp-graph/v2/observation"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"sync"
)

// Ensure, that GraphDBMock does implement store.GraphDB.
// If this is not the case, regenerate this file with moq.
var _ store.GraphDB = &GraphDBMock{}

// GraphDBMock is a mock implementation of store.GraphDB.
//
//     func TestSomethingThatUsesGraphDB(t *testing.T) {
//
//         // make and configure a mocked store.GraphDB
//         mockedGraphDB := &GraphDBMock{
//             AddVersionDetailsToInstanceFunc: func(ctx context.Context, instanceID string, datasetID string, edition string, version int) error {
// 	               panic("mock out the AddVersionDetailsToInstance method")
//             },
//             CheckerFunc: func(in1 context.Context, in2 *healthcheck.CheckState) error {
// 	               panic("mock out the Checker method")
//             },
//             CloseFunc: func(ctx context.Context) error {
// 	               panic("mock out the Close method")
//             },
//             SetInstanceIsPublishedFunc: func(ctx context.Context, instanceID string) error {
// 	               panic("mock out the SetInstanceIsPublished method")
//             },
//             StreamCSVRowsFunc: func(ctx context.Context, instanceID string, filterID string, filters *observation.DimensionFilters, limit *int) (observation.StreamRowReader, error) {
// 	               panic("mock out the StreamCSVRows method")
//             },
//         }
//
//         // use mockedGraphDB in code that requires store.GraphDB
//         // and then make assertions.
//
//     }
type GraphDBMock struct {
	// AddVersionDetailsToInstanceFunc mocks the AddVersionDetailsToInstance method.
	AddVersionDetailsToInstanceFunc func(ctx context.Context, instanceID string, datasetID string, edition string, version int) error

	// CheckerFunc mocks the Checker method.
	CheckerFunc func(in1 context.Context, in2 *healthcheck.CheckState) error

	// CloseFunc mocks the Close method.
	CloseFunc func(ctx context.Context) error

	// SetInstanceIsPublishedFunc mocks the SetInstanceIsPublished method.
	SetInstanceIsPublishedFunc func(ctx context.Context, instanceID string) error

	// StreamCSVRowsFunc mocks the StreamCSVRows method.
	StreamCSVRowsFunc func(ctx context.Context, instanceID string, filterID string, filters *observation.DimensionFilters, limit *int) (observation.StreamRowReader, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddVersionDetailsToInstance holds details about calls to the AddVersionDetailsToInstance method.
		AddVersionDetailsToInstance []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// InstanceID is the instanceID argument value.
			InstanceID string
			// DatasetID is the datasetID argument value.
			DatasetID string
			// Edition is the edition argument value.
			Edition string
			// Version is the version argument value.
			Version int
		}
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *healthcheck.CheckState
		}
		// Close holds details about calls to the Close method.
		Close []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// SetInstanceIsPublished holds details about calls to the SetInstanceIsPublished method.
		SetInstanceIsPublished []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// InstanceID is the instanceID argument value.
			InstanceID string
		}
		// StreamCSVRows holds details about calls to the StreamCSVRows method.
		StreamCSVRows []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// InstanceID is the instanceID argument value.
			InstanceID string
			// FilterID is the filterID argument value.
			FilterID string
			// Filters is the filters argument value.
			Filters *observation.DimensionFilters
			// Limit is the limit argument value.
			Limit *int
		}
	}
	lockAddVersionDetailsToInstance sync.RWMutex
	lockChecker                     sync.RWMutex
	lockClose                       sync.RWMutex
	lockSetInstanceIsPublished      sync.RWMutex
	lockStreamCSVRows               sync.RWMutex
}

// AddVersionDetailsToInstance calls AddVersionDetailsToInstanceFunc.
func (mock *GraphDBMock) AddVersionDetailsToInstance(ctx context.Context, instanceID string, datasetID string, edition string, version int) error {
	if mock.AddVersionDetailsToInstanceFunc == nil {
		panic("GraphDBMock.AddVersionDetailsToInstanceFunc: method is nil but GraphDB.AddVersionDetailsToInstance was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		InstanceID string
		DatasetID  string
		Edition    string
		Version    int
	}{
		Ctx:        ctx,
		InstanceID: instanceID,
		DatasetID:  datasetID,
		Edition:    edition,
		Version:    version,
	}
	mock.lockAddVersionDetailsToInstance.Lock()
	mock.calls.AddVersionDetailsToInstance = append(mock.calls.AddVersionDetailsToInstance, callInfo)
	mock.lockAddVersionDetailsToInstance.Unlock()
	return mock.AddVersionDetailsToInstanceFunc(ctx, instanceID, datasetID, edition, version)
}

// AddVersionDetailsToInstanceCalls gets all the calls that were made to AddVersionDetailsToInstance.
// Check the length with:
//     len(mockedGraphDB.AddVersionDetailsToInstanceCalls())
func (mock *GraphDBMock) AddVersionDetailsToInstanceCalls() []struct {
	Ctx        context.Context
	InstanceID string
	DatasetID  string
	Edition    string
	Version    int
} {
	var calls []struct {
		Ctx        context.Context
		InstanceID string
		DatasetID  string
		Edition    string
		Version    int
	}
	mock.lockAddVersionDetailsToInstance.RLock()
	calls = mock.calls.AddVersionDetailsToInstance
	mock.lockAddVersionDetailsToInstance.RUnlock()
	return calls
}

// Checker calls CheckerFunc.
func (mock *GraphDBMock) Checker(in1 context.Context, in2 *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("GraphDBMock.CheckerFunc: method is nil but GraphDB.Checker was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *healthcheck.CheckState
	}{
		In1: in1,
		In2: in2,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(in1, in2)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedGraphDB.CheckerCalls())
func (mock *GraphDBMock) CheckerCalls() []struct {
	In1 context.Context
	In2 *healthcheck.CheckState
} {
	var calls []struct {
		In1 context.Context
		In2 *healthcheck.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// Close calls CloseFunc.
func (mock *GraphDBMock) Close(ctx context.Context) error {
	if mock.CloseFunc == nil {
		panic("GraphDBMock.CloseFunc: method is nil but GraphDB.Close was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc(ctx)
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedGraphDB.CloseCalls())
func (mock *GraphDBMock) CloseCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// SetInstanceIsPublished calls SetInstanceIsPublishedFunc.
func (mock *GraphDBMock) SetInstanceIsPublished(ctx context.Context, instanceID string) error {
	if mock.SetInstanceIsPublishedFunc == nil {
		panic("GraphDBMock.SetInstanceIsPublishedFunc: method is nil but GraphDB.SetInstanceIsPublished was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		InstanceID string
	}{
		Ctx:        ctx,
		InstanceID: instanceID,
	}
	mock.lockSetInstanceIsPublished.Lock()
	mock.calls.SetInstanceIsPublished = append(mock.calls.SetInstanceIsPublished, callInfo)
	mock.lockSetInstanceIsPublished.Unlock()
	return mock.SetInstanceIsPublishedFunc(ctx, instanceID)
}

// SetInstanceIsPublishedCalls gets all the calls that were made to SetInstanceIsPublished.
// Check the length with:
//     len(mockedGraphDB.SetInstanceIsPublishedCalls())
func (mock *GraphDBMock) SetInstanceIsPublishedCalls() []struct {
	Ctx        context.Context
	InstanceID string
} {
	var calls []struct {
		Ctx        context.Context
		InstanceID string
	}
	mock.lockSetInstanceIsPublished.RLock()
	calls = mock.calls.SetInstanceIsPublished
	mock.lockSetInstanceIsPublished.RUnlock()
	return calls
}

// StreamCSVRows calls StreamCSVRowsFunc.
func (mock *GraphDBMock) StreamCSVRows(ctx context.Context, instanceID string, filterID string, filters *observation.DimensionFilters, limit *int) (observation.StreamRowReader, error) {
	if mock.StreamCSVRowsFunc == nil {
		panic("GraphDBMock.StreamCSVRowsFunc: method is nil but GraphDB.StreamCSVRows was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		InstanceID string
		FilterID   string
		Filters    *observation.DimensionFilters
		Limit      *int
	}{
		Ctx:        ctx,
		InstanceID: instanceID,
		FilterID:   filterID,
		Filters:    filters,
		Limit:      limit,
	}
	mock.lockStreamCSVRows.Lock()
	mock.calls.StreamCSVRows = append(mock.calls.StreamCSVRows, callInfo)
	mock.lockStreamCSVRows.Unlock()
	return mock.StreamCSVRowsFunc(ctx, instanceID, filterID, filters, limit)
}

// StreamCSVRowsCalls gets all the calls that were made to StreamCSVRows.
// Check the length with:
//     len(mockedGraphDB.StreamCSVRowsCalls())
func (mock *GraphDBMock) StreamCSVRowsCalls() []struct {
	Ctx        context.Context
	InstanceID string
	FilterID   string
	Filters    *observation.DimensionFilters
	Limit      *int
} {
	var calls []struct {
		Ctx        context.Context
		InstanceID string
		FilterID   string
		Filters    *observation.DimensionFilters
		Limit      *int
	}
	mock.lockStreamCSVRows.RLock()
	calls = mock.calls.StreamCSVRows
	mock.lockStreamCSVRows.RUnlock()
	return calls
}
