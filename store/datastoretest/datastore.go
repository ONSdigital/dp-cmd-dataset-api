// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package storetest

import (
	"github.com/ONSdigital/dp-dataset-api/models"
	"sync"
)

var (
	lockStorerMockAddDimensionToInstance        sync.RWMutex
	lockStorerMockAddEventToInstance            sync.RWMutex
	lockStorerMockAddInstance                   sync.RWMutex
	lockStorerMockGetDataset                    sync.RWMutex
	lockStorerMockGetDatasets                   sync.RWMutex
	lockStorerMockGetDimensionNodesFromInstance sync.RWMutex
	lockStorerMockGetEdition                    sync.RWMutex
	lockStorerMockGetEditions                   sync.RWMutex
	lockStorerMockGetInstance                   sync.RWMutex
	lockStorerMockGetInstances                  sync.RWMutex
	lockStorerMockGetNextVersion                sync.RWMutex
	lockStorerMockGetUniqueDimensionValues      sync.RWMutex
	lockStorerMockGetVersion                    sync.RWMutex
	lockStorerMockGetVersions                   sync.RWMutex
	lockStorerMockUpdateDataset                 sync.RWMutex
	lockStorerMockUpdateDatasetWithAssociation  sync.RWMutex
	lockStorerMockUpdateDimensionNodeID         sync.RWMutex
	lockStorerMockUpdateEdition                 sync.RWMutex
	lockStorerMockUpdateInstance                sync.RWMutex
	lockStorerMockUpdateObservationInserted     sync.RWMutex
	lockStorerMockUpdateVersion                 sync.RWMutex
	lockStorerMockUpsertContact                 sync.RWMutex
	lockStorerMockUpsertDataset                 sync.RWMutex
	lockStorerMockUpsertEdition                 sync.RWMutex
	lockStorerMockUpsertVersion                 sync.RWMutex
)

// StorerMock is a mock implementation of Storer.
//
//     func TestSomethingThatUsesStorer(t *testing.T) {
//
//         // make and configure a mocked Storer
//         mockedStorer := &StorerMock{
//             AddDimensionToInstanceFunc: func(dimension *models.Dimension) error {
// 	               panic("TODO: mock out the AddDimensionToInstance method")
//             },
//             AddEventToInstanceFunc: func(instanceID string, event *models.Event) error {
// 	               panic("TODO: mock out the AddEventToInstance method")
//             },
//             AddInstanceFunc: func(instance *models.Instance) (*models.Instance, error) {
// 	               panic("TODO: mock out the AddInstance method")
//             },
//             GetDatasetFunc: func(id string) (*models.DatasetUpdate, error) {
// 	               panic("TODO: mock out the GetDataset method")
//             },
//             GetDatasetsFunc: func() (*models.DatasetResults, error) {
// 	               panic("TODO: mock out the GetDatasets method")
//             },
//             GetDimensionNodesFromInstanceFunc: func(id string) (*models.DimensionNodeResults, error) {
// 	               panic("TODO: mock out the GetDimensionNodesFromInstance method")
//             },
//             GetEditionFunc: func(id string, editionID string, state string) (*models.Edition, error) {
// 	               panic("TODO: mock out the GetEdition method")
//             },
//             GetEditionsFunc: func(id string, state string) (*models.EditionResults, error) {
// 	               panic("TODO: mock out the GetEditions method")
//             },
//             GetInstanceFunc: func(id string) (*models.Instance, error) {
// 	               panic("TODO: mock out the GetInstance method")
//             },
//             GetInstancesFunc: func(filter string) (*models.InstanceResults, error) {
// 	               panic("TODO: mock out the GetInstances method")
//             },
//             GetNextVersionFunc: func(datasetID string, editionID string) (int, error) {
// 	               panic("TODO: mock out the GetNextVersion method")
//             },
//             GetUniqueDimensionValuesFunc: func(id string, dimension string) (*models.DimensionValues, error) {
// 	               panic("TODO: mock out the GetUniqueDimensionValues method")
//             },
//             GetVersionFunc: func(datasetID string, editionID string, version string, state string) (*models.Version, error) {
// 	               panic("TODO: mock out the GetVersion method")
//             },
//             GetVersionsFunc: func(datasetID string, editionID string, state string) (*models.VersionResults, error) {
// 	               panic("TODO: mock out the GetVersions method")
//             },
//             UpdateDatasetFunc: func(id string, dataset *models.Dataset) error {
// 	               panic("TODO: mock out the UpdateDataset method")
//             },
//             UpdateDatasetWithAssociationFunc: func(id string, state string, version *models.Version) error {
// 	               panic("TODO: mock out the UpdateDatasetWithAssociation method")
//             },
//             UpdateDimensionNodeIDFunc: func(dimension *models.Dimension) error {
// 	               panic("TODO: mock out the UpdateDimensionNodeID method")
//             },
//             UpdateEditionFunc: func(id string, state string) error {
// 	               panic("TODO: mock out the UpdateEdition method")
//             },
//             UpdateInstanceFunc: func(id string, instance *models.Instance) error {
// 	               panic("TODO: mock out the UpdateInstance method")
//             },
//             UpdateObservationInsertedFunc: func(id string, observationInserted int64) error {
// 	               panic("TODO: mock out the UpdateObservationInserted method")
//             },
//             UpdateVersionFunc: func(id string, version *models.Version) error {
// 	               panic("TODO: mock out the UpdateVersion method")
//             },
//             UpsertContactFunc: func(id string, update interface{}) error {
// 	               panic("TODO: mock out the UpsertContact method")
//             },
//             UpsertDatasetFunc: func(id string, datasetDoc *models.DatasetUpdate) error {
// 	               panic("TODO: mock out the UpsertDataset method")
//             },
//             UpsertEditionFunc: func(id string, editionDoc *models.Edition) error {
// 	               panic("TODO: mock out the UpsertEdition method")
//             },
//             UpsertVersionFunc: func(id string, versionDoc *models.Version) error {
// 	               panic("TODO: mock out the UpsertVersion method")
//             },
//         }
//
//         // TODO: use mockedStorer in code that requires Storer
//         //       and then make assertions.
//
//     }
type StorerMock struct {
	// AddDimensionToInstanceFunc mocks the AddDimensionToInstance method.
	AddDimensionToInstanceFunc func(dimension *models.Dimension) error

	// AddEventToInstanceFunc mocks the AddEventToInstance method.
	AddEventToInstanceFunc func(instanceID string, event *models.Event) error

	// AddInstanceFunc mocks the AddInstance method.
	AddInstanceFunc func(instance *models.Instance) (*models.Instance, error)

	// GetDatasetFunc mocks the GetDataset method.
	GetDatasetFunc func(id string) (*models.DatasetUpdate, error)

	// GetDatasetsFunc mocks the GetDatasets method.
	GetDatasetsFunc func() (*models.DatasetResults, error)

	// GetDimensionNodesFromInstanceFunc mocks the GetDimensionNodesFromInstance method.
	GetDimensionNodesFromInstanceFunc func(id string) (*models.DimensionNodeResults, error)

	// GetEditionFunc mocks the GetEdition method.
	GetEditionFunc func(id string, editionID string, state string) (*models.Edition, error)

	// GetEditionsFunc mocks the GetEditions method.
	GetEditionsFunc func(id string, state string) (*models.EditionResults, error)

	// GetInstanceFunc mocks the GetInstance method.
	GetInstanceFunc func(id string) (*models.Instance, error)

	// GetInstancesFunc mocks the GetInstances method.
	GetInstancesFunc func(filter string) (*models.InstanceResults, error)

	// GetNextVersionFunc mocks the GetNextVersion method.
	GetNextVersionFunc func(datasetID string, editionID string) (int, error)

	// GetUniqueDimensionValuesFunc mocks the GetUniqueDimensionValues method.
	GetUniqueDimensionValuesFunc func(id string, dimension string) (*models.DimensionValues, error)

	// GetVersionFunc mocks the GetVersion method.
	GetVersionFunc func(datasetID string, editionID string, version string, state string) (*models.Version, error)

	// GetVersionsFunc mocks the GetVersions method.
	GetVersionsFunc func(datasetID string, editionID string, state string) (*models.VersionResults, error)

	// UpdateDatasetFunc mocks the UpdateDataset method.
	UpdateDatasetFunc func(id string, dataset *models.Dataset) error

	// UpdateDatasetWithAssociationFunc mocks the UpdateDatasetWithAssociation method.
	UpdateDatasetWithAssociationFunc func(id string, state string, version *models.Version) error

	// UpdateDimensionNodeIDFunc mocks the UpdateDimensionNodeID method.
	UpdateDimensionNodeIDFunc func(dimension *models.Dimension) error

	// UpdateEditionFunc mocks the UpdateEdition method.
	UpdateEditionFunc func(id string, state string) error

	// UpdateInstanceFunc mocks the UpdateInstance method.
	UpdateInstanceFunc func(id string, instance *models.Instance) error

	// UpdateObservationInsertedFunc mocks the UpdateObservationInserted method.
	UpdateObservationInsertedFunc func(id string, observationInserted int64) error

	// UpdateVersionFunc mocks the UpdateVersion method.
	UpdateVersionFunc func(id string, version *models.Version) error

	// UpsertContactFunc mocks the UpsertContact method.
	UpsertContactFunc func(id string, update interface{}) error

	// UpsertDatasetFunc mocks the UpsertDataset method.
	UpsertDatasetFunc func(id string, datasetDoc *models.DatasetUpdate) error

	// UpsertEditionFunc mocks the UpsertEdition method.
	UpsertEditionFunc func(id string, editionDoc *models.Edition) error

	// UpsertVersionFunc mocks the UpsertVersion method.
	UpsertVersionFunc func(id string, versionDoc *models.Version) error

	// calls tracks calls to the methods.
	calls struct {
		// AddDimensionToInstance holds details about calls to the AddDimensionToInstance method.
		AddDimensionToInstance []struct {
			// Dimension is the dimension argument value.
			Dimension *models.Dimension
		}
		// AddEventToInstance holds details about calls to the AddEventToInstance method.
		AddEventToInstance []struct {
			// InstanceID is the instanceID argument value.
			InstanceID string
			// Event is the event argument value.
			Event *models.Event
		}
		// AddInstance holds details about calls to the AddInstance method.
		AddInstance []struct {
			// Instance is the instance argument value.
			Instance *models.Instance
		}
		// GetDataset holds details about calls to the GetDataset method.
		GetDataset []struct {
			// Id is the id argument value.
			Id string
		}
		// GetDatasets holds details about calls to the GetDatasets method.
		GetDatasets []struct {
		}
		// GetDimensionNodesFromInstance holds details about calls to the GetDimensionNodesFromInstance method.
		GetDimensionNodesFromInstance []struct {
			// Id is the id argument value.
			Id string
		}
		// GetEdition holds details about calls to the GetEdition method.
		GetEdition []struct {
			// Id is the id argument value.
			Id string
			// EditionID is the editionID argument value.
			EditionID string
			// State is the state argument value.
			State string
		}
		// GetEditions holds details about calls to the GetEditions method.
		GetEditions []struct {
			// Id is the id argument value.
			Id string
			// State is the state argument value.
			State string
		}
		// GetInstance holds details about calls to the GetInstance method.
		GetInstance []struct {
			// Id is the id argument value.
			Id string
		}
		// GetInstances holds details about calls to the GetInstances method.
		GetInstances []struct {
			// Filter is the filter argument value.
			Filter string
		}
		// GetNextVersion holds details about calls to the GetNextVersion method.
		GetNextVersion []struct {
			// DatasetID is the datasetID argument value.
			DatasetID string
			// EditionID is the editionID argument value.
			EditionID string
		}
		// GetUniqueDimensionValues holds details about calls to the GetUniqueDimensionValues method.
		GetUniqueDimensionValues []struct {
			// Id is the id argument value.
			Id string
			// Dimension is the dimension argument value.
			Dimension string
		}
		// GetVersion holds details about calls to the GetVersion method.
		GetVersion []struct {
			// DatasetID is the datasetID argument value.
			DatasetID string
			// EditionID is the editionID argument value.
			EditionID string
			// Version is the version argument value.
			Version string
			// State is the state argument value.
			State string
		}
		// GetVersions holds details about calls to the GetVersions method.
		GetVersions []struct {
			// DatasetID is the datasetID argument value.
			DatasetID string
			// EditionID is the editionID argument value.
			EditionID string
			// State is the state argument value.
			State string
		}
		// UpdateDataset holds details about calls to the UpdateDataset method.
		UpdateDataset []struct {
			// Id is the id argument value.
			Id string
			// Dataset is the dataset argument value.
			Dataset *models.Dataset
		}
		// UpdateDatasetWithAssociation holds details about calls to the UpdateDatasetWithAssociation method.
		UpdateDatasetWithAssociation []struct {
			// Id is the id argument value.
			Id string
			// State is the state argument value.
			State string
			// Version is the version argument value.
			Version *models.Version
		}
		// UpdateDimensionNodeID holds details about calls to the UpdateDimensionNodeID method.
		UpdateDimensionNodeID []struct {
			// Dimension is the dimension argument value.
			Dimension *models.Dimension
		}
		// UpdateEdition holds details about calls to the UpdateEdition method.
		UpdateEdition []struct {
			// Id is the id argument value.
			Id string
			// State is the state argument value.
			State string
		}
		// UpdateInstance holds details about calls to the UpdateInstance method.
		UpdateInstance []struct {
			// Id is the id argument value.
			Id string
			// Instance is the instance argument value.
			Instance *models.Instance
		}
		// UpdateObservationInserted holds details about calls to the UpdateObservationInserted method.
		UpdateObservationInserted []struct {
			// Id is the id argument value.
			Id string
			// ObservationInserted is the observationInserted argument value.
			ObservationInserted int64
		}
		// UpdateVersion holds details about calls to the UpdateVersion method.
		UpdateVersion []struct {
			// Id is the id argument value.
			Id string
			// Version is the version argument value.
			Version *models.Version
		}
		// UpsertContact holds details about calls to the UpsertContact method.
		UpsertContact []struct {
			// Id is the id argument value.
			Id string
			// Update is the update argument value.
			Update interface{}
		}
		// UpsertDataset holds details about calls to the UpsertDataset method.
		UpsertDataset []struct {
			// Id is the id argument value.
			Id string
			// DatasetDoc is the datasetDoc argument value.
			DatasetDoc *models.DatasetUpdate
		}
		// UpsertEdition holds details about calls to the UpsertEdition method.
		UpsertEdition []struct {
			// Id is the id argument value.
			Id string
			// EditionDoc is the editionDoc argument value.
			EditionDoc *models.Edition
		}
		// UpsertVersion holds details about calls to the UpsertVersion method.
		UpsertVersion []struct {
			// Id is the id argument value.
			Id string
			// VersionDoc is the versionDoc argument value.
			VersionDoc *models.Version
		}
	}
}

// AddDimensionToInstance calls AddDimensionToInstanceFunc.
func (mock *StorerMock) AddDimensionToInstance(dimension *models.Dimension) error {
	if mock.AddDimensionToInstanceFunc == nil {
		panic("moq: StorerMock.AddDimensionToInstanceFunc is nil but Storer.AddDimensionToInstance was just called")
	}
	callInfo := struct {
		Dimension *models.Dimension
	}{
		Dimension: dimension,
	}
	lockStorerMockAddDimensionToInstance.Lock()
	mock.calls.AddDimensionToInstance = append(mock.calls.AddDimensionToInstance, callInfo)
	lockStorerMockAddDimensionToInstance.Unlock()
	return mock.AddDimensionToInstanceFunc(dimension)
}

// AddDimensionToInstanceCalls gets all the calls that were made to AddDimensionToInstance.
// Check the length with:
//     len(mockedStorer.AddDimensionToInstanceCalls())
func (mock *StorerMock) AddDimensionToInstanceCalls() []struct {
	Dimension *models.Dimension
} {
	var calls []struct {
		Dimension *models.Dimension
	}
	lockStorerMockAddDimensionToInstance.RLock()
	calls = mock.calls.AddDimensionToInstance
	lockStorerMockAddDimensionToInstance.RUnlock()
	return calls
}

// AddEventToInstance calls AddEventToInstanceFunc.
func (mock *StorerMock) AddEventToInstance(instanceID string, event *models.Event) error {
	if mock.AddEventToInstanceFunc == nil {
		panic("moq: StorerMock.AddEventToInstanceFunc is nil but Storer.AddEventToInstance was just called")
	}
	callInfo := struct {
		InstanceID string
		Event      *models.Event
	}{
		InstanceID: instanceID,
		Event:      event,
	}
	lockStorerMockAddEventToInstance.Lock()
	mock.calls.AddEventToInstance = append(mock.calls.AddEventToInstance, callInfo)
	lockStorerMockAddEventToInstance.Unlock()
	return mock.AddEventToInstanceFunc(instanceID, event)
}

// AddEventToInstanceCalls gets all the calls that were made to AddEventToInstance.
// Check the length with:
//     len(mockedStorer.AddEventToInstanceCalls())
func (mock *StorerMock) AddEventToInstanceCalls() []struct {
	InstanceID string
	Event      *models.Event
} {
	var calls []struct {
		InstanceID string
		Event      *models.Event
	}
	lockStorerMockAddEventToInstance.RLock()
	calls = mock.calls.AddEventToInstance
	lockStorerMockAddEventToInstance.RUnlock()
	return calls
}

// AddInstance calls AddInstanceFunc.
func (mock *StorerMock) AddInstance(instance *models.Instance) (*models.Instance, error) {
	if mock.AddInstanceFunc == nil {
		panic("moq: StorerMock.AddInstanceFunc is nil but Storer.AddInstance was just called")
	}
	callInfo := struct {
		Instance *models.Instance
	}{
		Instance: instance,
	}
	lockStorerMockAddInstance.Lock()
	mock.calls.AddInstance = append(mock.calls.AddInstance, callInfo)
	lockStorerMockAddInstance.Unlock()
	return mock.AddInstanceFunc(instance)
}

// AddInstanceCalls gets all the calls that were made to AddInstance.
// Check the length with:
//     len(mockedStorer.AddInstanceCalls())
func (mock *StorerMock) AddInstanceCalls() []struct {
	Instance *models.Instance
} {
	var calls []struct {
		Instance *models.Instance
	}
	lockStorerMockAddInstance.RLock()
	calls = mock.calls.AddInstance
	lockStorerMockAddInstance.RUnlock()
	return calls
}

// GetDataset calls GetDatasetFunc.
func (mock *StorerMock) GetDataset(id string) (*models.DatasetUpdate, error) {
	if mock.GetDatasetFunc == nil {
		panic("moq: StorerMock.GetDatasetFunc is nil but Storer.GetDataset was just called")
	}
	callInfo := struct {
		Id string
	}{
		Id: id,
	}
	lockStorerMockGetDataset.Lock()
	mock.calls.GetDataset = append(mock.calls.GetDataset, callInfo)
	lockStorerMockGetDataset.Unlock()
	return mock.GetDatasetFunc(id)
}

// GetDatasetCalls gets all the calls that were made to GetDataset.
// Check the length with:
//     len(mockedStorer.GetDatasetCalls())
func (mock *StorerMock) GetDatasetCalls() []struct {
	Id string
} {
	var calls []struct {
		Id string
	}
	lockStorerMockGetDataset.RLock()
	calls = mock.calls.GetDataset
	lockStorerMockGetDataset.RUnlock()
	return calls
}

// GetDatasets calls GetDatasetsFunc.
func (mock *StorerMock) GetDatasets() (*models.DatasetResults, error) {
	if mock.GetDatasetsFunc == nil {
		panic("moq: StorerMock.GetDatasetsFunc is nil but Storer.GetDatasets was just called")
	}
	callInfo := struct {
	}{}
	lockStorerMockGetDatasets.Lock()
	mock.calls.GetDatasets = append(mock.calls.GetDatasets, callInfo)
	lockStorerMockGetDatasets.Unlock()
	return mock.GetDatasetsFunc()
}

// GetDatasetsCalls gets all the calls that were made to GetDatasets.
// Check the length with:
//     len(mockedStorer.GetDatasetsCalls())
func (mock *StorerMock) GetDatasetsCalls() []struct {
} {
	var calls []struct {
	}
	lockStorerMockGetDatasets.RLock()
	calls = mock.calls.GetDatasets
	lockStorerMockGetDatasets.RUnlock()
	return calls
}

// GetDimensionNodesFromInstance calls GetDimensionNodesFromInstanceFunc.
func (mock *StorerMock) GetDimensionNodesFromInstance(id string) (*models.DimensionNodeResults, error) {
	if mock.GetDimensionNodesFromInstanceFunc == nil {
		panic("moq: StorerMock.GetDimensionNodesFromInstanceFunc is nil but Storer.GetDimensionNodesFromInstance was just called")
	}
	callInfo := struct {
		Id string
	}{
		Id: id,
	}
	lockStorerMockGetDimensionNodesFromInstance.Lock()
	mock.calls.GetDimensionNodesFromInstance = append(mock.calls.GetDimensionNodesFromInstance, callInfo)
	lockStorerMockGetDimensionNodesFromInstance.Unlock()
	return mock.GetDimensionNodesFromInstanceFunc(id)
}

// GetDimensionNodesFromInstanceCalls gets all the calls that were made to GetDimensionNodesFromInstance.
// Check the length with:
//     len(mockedStorer.GetDimensionNodesFromInstanceCalls())
func (mock *StorerMock) GetDimensionNodesFromInstanceCalls() []struct {
	Id string
} {
	var calls []struct {
		Id string
	}
	lockStorerMockGetDimensionNodesFromInstance.RLock()
	calls = mock.calls.GetDimensionNodesFromInstance
	lockStorerMockGetDimensionNodesFromInstance.RUnlock()
	return calls
}

// GetEdition calls GetEditionFunc.
func (mock *StorerMock) GetEdition(id string, editionID string, state string) (*models.Edition, error) {
	if mock.GetEditionFunc == nil {
		panic("moq: StorerMock.GetEditionFunc is nil but Storer.GetEdition was just called")
	}
	callInfo := struct {
		Id        string
		EditionID string
		State     string
	}{
		Id:        id,
		EditionID: editionID,
		State:     state,
	}
	lockStorerMockGetEdition.Lock()
	mock.calls.GetEdition = append(mock.calls.GetEdition, callInfo)
	lockStorerMockGetEdition.Unlock()
	return mock.GetEditionFunc(id, editionID, state)
}

// GetEditionCalls gets all the calls that were made to GetEdition.
// Check the length with:
//     len(mockedStorer.GetEditionCalls())
func (mock *StorerMock) GetEditionCalls() []struct {
	Id        string
	EditionID string
	State     string
} {
	var calls []struct {
		Id        string
		EditionID string
		State     string
	}
	lockStorerMockGetEdition.RLock()
	calls = mock.calls.GetEdition
	lockStorerMockGetEdition.RUnlock()
	return calls
}

// GetEditions calls GetEditionsFunc.
func (mock *StorerMock) GetEditions(id string, state string) (*models.EditionResults, error) {
	if mock.GetEditionsFunc == nil {
		panic("moq: StorerMock.GetEditionsFunc is nil but Storer.GetEditions was just called")
	}
	callInfo := struct {
		Id    string
		State string
	}{
		Id:    id,
		State: state,
	}
	lockStorerMockGetEditions.Lock()
	mock.calls.GetEditions = append(mock.calls.GetEditions, callInfo)
	lockStorerMockGetEditions.Unlock()
	return mock.GetEditionsFunc(id, state)
}

// GetEditionsCalls gets all the calls that were made to GetEditions.
// Check the length with:
//     len(mockedStorer.GetEditionsCalls())
func (mock *StorerMock) GetEditionsCalls() []struct {
	Id    string
	State string
} {
	var calls []struct {
		Id    string
		State string
	}
	lockStorerMockGetEditions.RLock()
	calls = mock.calls.GetEditions
	lockStorerMockGetEditions.RUnlock()
	return calls
}

// GetInstance calls GetInstanceFunc.
func (mock *StorerMock) GetInstance(id string) (*models.Instance, error) {
	if mock.GetInstanceFunc == nil {
		panic("moq: StorerMock.GetInstanceFunc is nil but Storer.GetInstance was just called")
	}
	callInfo := struct {
		Id string
	}{
		Id: id,
	}
	lockStorerMockGetInstance.Lock()
	mock.calls.GetInstance = append(mock.calls.GetInstance, callInfo)
	lockStorerMockGetInstance.Unlock()
	return mock.GetInstanceFunc(id)
}

// GetInstanceCalls gets all the calls that were made to GetInstance.
// Check the length with:
//     len(mockedStorer.GetInstanceCalls())
func (mock *StorerMock) GetInstanceCalls() []struct {
	Id string
} {
	var calls []struct {
		Id string
	}
	lockStorerMockGetInstance.RLock()
	calls = mock.calls.GetInstance
	lockStorerMockGetInstance.RUnlock()
	return calls
}

// GetInstances calls GetInstancesFunc.
func (mock *StorerMock) GetInstances(filter string) (*models.InstanceResults, error) {
	if mock.GetInstancesFunc == nil {
		panic("moq: StorerMock.GetInstancesFunc is nil but Storer.GetInstances was just called")
	}
	callInfo := struct {
		Filter string
	}{
		Filter: filter,
	}
	lockStorerMockGetInstances.Lock()
	mock.calls.GetInstances = append(mock.calls.GetInstances, callInfo)
	lockStorerMockGetInstances.Unlock()
	return mock.GetInstancesFunc(filter)
}

// GetInstancesCalls gets all the calls that were made to GetInstances.
// Check the length with:
//     len(mockedStorer.GetInstancesCalls())
func (mock *StorerMock) GetInstancesCalls() []struct {
	Filter string
} {
	var calls []struct {
		Filter string
	}
	lockStorerMockGetInstances.RLock()
	calls = mock.calls.GetInstances
	lockStorerMockGetInstances.RUnlock()
	return calls
}

// GetNextVersion calls GetNextVersionFunc.
func (mock *StorerMock) GetNextVersion(datasetID string, editionID string) (int, error) {
	if mock.GetNextVersionFunc == nil {
		panic("moq: StorerMock.GetNextVersionFunc is nil but Storer.GetNextVersion was just called")
	}
	callInfo := struct {
		DatasetID string
		EditionID string
	}{
		DatasetID: datasetID,
		EditionID: editionID,
	}
	lockStorerMockGetNextVersion.Lock()
	mock.calls.GetNextVersion = append(mock.calls.GetNextVersion, callInfo)
	lockStorerMockGetNextVersion.Unlock()
	return mock.GetNextVersionFunc(datasetID, editionID)
}

// GetNextVersionCalls gets all the calls that were made to GetNextVersion.
// Check the length with:
//     len(mockedStorer.GetNextVersionCalls())
func (mock *StorerMock) GetNextVersionCalls() []struct {
	DatasetID string
	EditionID string
} {
	var calls []struct {
		DatasetID string
		EditionID string
	}
	lockStorerMockGetNextVersion.RLock()
	calls = mock.calls.GetNextVersion
	lockStorerMockGetNextVersion.RUnlock()
	return calls
}

// GetUniqueDimensionValues calls GetUniqueDimensionValuesFunc.
func (mock *StorerMock) GetUniqueDimensionValues(id string, dimension string) (*models.DimensionValues, error) {
	if mock.GetUniqueDimensionValuesFunc == nil {
		panic("moq: StorerMock.GetUniqueDimensionValuesFunc is nil but Storer.GetUniqueDimensionValues was just called")
	}
	callInfo := struct {
		Id        string
		Dimension string
	}{
		Id:        id,
		Dimension: dimension,
	}
	lockStorerMockGetUniqueDimensionValues.Lock()
	mock.calls.GetUniqueDimensionValues = append(mock.calls.GetUniqueDimensionValues, callInfo)
	lockStorerMockGetUniqueDimensionValues.Unlock()
	return mock.GetUniqueDimensionValuesFunc(id, dimension)
}

// GetUniqueDimensionValuesCalls gets all the calls that were made to GetUniqueDimensionValues.
// Check the length with:
//     len(mockedStorer.GetUniqueDimensionValuesCalls())
func (mock *StorerMock) GetUniqueDimensionValuesCalls() []struct {
	Id        string
	Dimension string
} {
	var calls []struct {
		Id        string
		Dimension string
	}
	lockStorerMockGetUniqueDimensionValues.RLock()
	calls = mock.calls.GetUniqueDimensionValues
	lockStorerMockGetUniqueDimensionValues.RUnlock()
	return calls
}

// GetVersion calls GetVersionFunc.
func (mock *StorerMock) GetVersion(datasetID string, editionID string, version string, state string) (*models.Version, error) {
	if mock.GetVersionFunc == nil {
		panic("moq: StorerMock.GetVersionFunc is nil but Storer.GetVersion was just called")
	}
	callInfo := struct {
		DatasetID string
		EditionID string
		Version   string
		State     string
	}{
		DatasetID: datasetID,
		EditionID: editionID,
		Version:   version,
		State:     state,
	}
	lockStorerMockGetVersion.Lock()
	mock.calls.GetVersion = append(mock.calls.GetVersion, callInfo)
	lockStorerMockGetVersion.Unlock()
	return mock.GetVersionFunc(datasetID, editionID, version, state)
}

// GetVersionCalls gets all the calls that were made to GetVersion.
// Check the length with:
//     len(mockedStorer.GetVersionCalls())
func (mock *StorerMock) GetVersionCalls() []struct {
	DatasetID string
	EditionID string
	Version   string
	State     string
} {
	var calls []struct {
		DatasetID string
		EditionID string
		Version   string
		State     string
	}
	lockStorerMockGetVersion.RLock()
	calls = mock.calls.GetVersion
	lockStorerMockGetVersion.RUnlock()
	return calls
}

// GetVersions calls GetVersionsFunc.
func (mock *StorerMock) GetVersions(datasetID string, editionID string, state string) (*models.VersionResults, error) {
	if mock.GetVersionsFunc == nil {
		panic("moq: StorerMock.GetVersionsFunc is nil but Storer.GetVersions was just called")
	}
	callInfo := struct {
		DatasetID string
		EditionID string
		State     string
	}{
		DatasetID: datasetID,
		EditionID: editionID,
		State:     state,
	}
	lockStorerMockGetVersions.Lock()
	mock.calls.GetVersions = append(mock.calls.GetVersions, callInfo)
	lockStorerMockGetVersions.Unlock()
	return mock.GetVersionsFunc(datasetID, editionID, state)
}

// GetVersionsCalls gets all the calls that were made to GetVersions.
// Check the length with:
//     len(mockedStorer.GetVersionsCalls())
func (mock *StorerMock) GetVersionsCalls() []struct {
	DatasetID string
	EditionID string
	State     string
} {
	var calls []struct {
		DatasetID string
		EditionID string
		State     string
	}
	lockStorerMockGetVersions.RLock()
	calls = mock.calls.GetVersions
	lockStorerMockGetVersions.RUnlock()
	return calls
}

// UpdateDataset calls UpdateDatasetFunc.
func (mock *StorerMock) UpdateDataset(id string, dataset *models.Dataset) error {
	if mock.UpdateDatasetFunc == nil {
		panic("moq: StorerMock.UpdateDatasetFunc is nil but Storer.UpdateDataset was just called")
	}
	callInfo := struct {
		Id      string
		Dataset *models.Dataset
	}{
		Id:      id,
		Dataset: dataset,
	}
	lockStorerMockUpdateDataset.Lock()
	mock.calls.UpdateDataset = append(mock.calls.UpdateDataset, callInfo)
	lockStorerMockUpdateDataset.Unlock()
	return mock.UpdateDatasetFunc(id, dataset)
}

// UpdateDatasetCalls gets all the calls that were made to UpdateDataset.
// Check the length with:
//     len(mockedStorer.UpdateDatasetCalls())
func (mock *StorerMock) UpdateDatasetCalls() []struct {
	Id      string
	Dataset *models.Dataset
} {
	var calls []struct {
		Id      string
		Dataset *models.Dataset
	}
	lockStorerMockUpdateDataset.RLock()
	calls = mock.calls.UpdateDataset
	lockStorerMockUpdateDataset.RUnlock()
	return calls
}

// UpdateDatasetWithAssociation calls UpdateDatasetWithAssociationFunc.
func (mock *StorerMock) UpdateDatasetWithAssociation(id string, state string, version *models.Version) error {
	if mock.UpdateDatasetWithAssociationFunc == nil {
		panic("moq: StorerMock.UpdateDatasetWithAssociationFunc is nil but Storer.UpdateDatasetWithAssociation was just called")
	}
	callInfo := struct {
		Id      string
		State   string
		Version *models.Version
	}{
		Id:      id,
		State:   state,
		Version: version,
	}
	lockStorerMockUpdateDatasetWithAssociation.Lock()
	mock.calls.UpdateDatasetWithAssociation = append(mock.calls.UpdateDatasetWithAssociation, callInfo)
	lockStorerMockUpdateDatasetWithAssociation.Unlock()
	return mock.UpdateDatasetWithAssociationFunc(id, state, version)
}

// UpdateDatasetWithAssociationCalls gets all the calls that were made to UpdateDatasetWithAssociation.
// Check the length with:
//     len(mockedStorer.UpdateDatasetWithAssociationCalls())
func (mock *StorerMock) UpdateDatasetWithAssociationCalls() []struct {
	Id      string
	State   string
	Version *models.Version
} {
	var calls []struct {
		Id      string
		State   string
		Version *models.Version
	}
	lockStorerMockUpdateDatasetWithAssociation.RLock()
	calls = mock.calls.UpdateDatasetWithAssociation
	lockStorerMockUpdateDatasetWithAssociation.RUnlock()
	return calls
}

// UpdateDimensionNodeID calls UpdateDimensionNodeIDFunc.
func (mock *StorerMock) UpdateDimensionNodeID(dimension *models.Dimension) error {
	if mock.UpdateDimensionNodeIDFunc == nil {
		panic("moq: StorerMock.UpdateDimensionNodeIDFunc is nil but Storer.UpdateDimensionNodeID was just called")
	}
	callInfo := struct {
		Dimension *models.Dimension
	}{
		Dimension: dimension,
	}
	lockStorerMockUpdateDimensionNodeID.Lock()
	mock.calls.UpdateDimensionNodeID = append(mock.calls.UpdateDimensionNodeID, callInfo)
	lockStorerMockUpdateDimensionNodeID.Unlock()
	return mock.UpdateDimensionNodeIDFunc(dimension)
}

// UpdateDimensionNodeIDCalls gets all the calls that were made to UpdateDimensionNodeID.
// Check the length with:
//     len(mockedStorer.UpdateDimensionNodeIDCalls())
func (mock *StorerMock) UpdateDimensionNodeIDCalls() []struct {
	Dimension *models.Dimension
} {
	var calls []struct {
		Dimension *models.Dimension
	}
	lockStorerMockUpdateDimensionNodeID.RLock()
	calls = mock.calls.UpdateDimensionNodeID
	lockStorerMockUpdateDimensionNodeID.RUnlock()
	return calls
}

// UpdateEdition calls UpdateEditionFunc.
func (mock *StorerMock) UpdateEdition(id string, state string) error {
	if mock.UpdateEditionFunc == nil {
		panic("moq: StorerMock.UpdateEditionFunc is nil but Storer.UpdateEdition was just called")
	}
	callInfo := struct {
		Id    string
		State string
	}{
		Id:    id,
		State: state,
	}
	lockStorerMockUpdateEdition.Lock()
	mock.calls.UpdateEdition = append(mock.calls.UpdateEdition, callInfo)
	lockStorerMockUpdateEdition.Unlock()
	return mock.UpdateEditionFunc(id, state)
}

// UpdateEditionCalls gets all the calls that were made to UpdateEdition.
// Check the length with:
//     len(mockedStorer.UpdateEditionCalls())
func (mock *StorerMock) UpdateEditionCalls() []struct {
	Id    string
	State string
} {
	var calls []struct {
		Id    string
		State string
	}
	lockStorerMockUpdateEdition.RLock()
	calls = mock.calls.UpdateEdition
	lockStorerMockUpdateEdition.RUnlock()
	return calls
}

// UpdateInstance calls UpdateInstanceFunc.
func (mock *StorerMock) UpdateInstance(id string, instance *models.Instance) error {
	if mock.UpdateInstanceFunc == nil {
		panic("moq: StorerMock.UpdateInstanceFunc is nil but Storer.UpdateInstance was just called")
	}
	callInfo := struct {
		Id       string
		Instance *models.Instance
	}{
		Id:       id,
		Instance: instance,
	}
	lockStorerMockUpdateInstance.Lock()
	mock.calls.UpdateInstance = append(mock.calls.UpdateInstance, callInfo)
	lockStorerMockUpdateInstance.Unlock()
	return mock.UpdateInstanceFunc(id, instance)
}

// UpdateInstanceCalls gets all the calls that were made to UpdateInstance.
// Check the length with:
//     len(mockedStorer.UpdateInstanceCalls())
func (mock *StorerMock) UpdateInstanceCalls() []struct {
	Id       string
	Instance *models.Instance
} {
	var calls []struct {
		Id       string
		Instance *models.Instance
	}
	lockStorerMockUpdateInstance.RLock()
	calls = mock.calls.UpdateInstance
	lockStorerMockUpdateInstance.RUnlock()
	return calls
}

// UpdateObservationInserted calls UpdateObservationInsertedFunc.
func (mock *StorerMock) UpdateObservationInserted(id string, observationInserted int64) error {
	if mock.UpdateObservationInsertedFunc == nil {
		panic("moq: StorerMock.UpdateObservationInsertedFunc is nil but Storer.UpdateObservationInserted was just called")
	}
	callInfo := struct {
		Id                  string
		ObservationInserted int64
	}{
		Id:                  id,
		ObservationInserted: observationInserted,
	}
	lockStorerMockUpdateObservationInserted.Lock()
	mock.calls.UpdateObservationInserted = append(mock.calls.UpdateObservationInserted, callInfo)
	lockStorerMockUpdateObservationInserted.Unlock()
	return mock.UpdateObservationInsertedFunc(id, observationInserted)
}

// UpdateObservationInsertedCalls gets all the calls that were made to UpdateObservationInserted.
// Check the length with:
//     len(mockedStorer.UpdateObservationInsertedCalls())
func (mock *StorerMock) UpdateObservationInsertedCalls() []struct {
	Id                  string
	ObservationInserted int64
} {
	var calls []struct {
		Id                  string
		ObservationInserted int64
	}
	lockStorerMockUpdateObservationInserted.RLock()
	calls = mock.calls.UpdateObservationInserted
	lockStorerMockUpdateObservationInserted.RUnlock()
	return calls
}

// UpdateVersion calls UpdateVersionFunc.
func (mock *StorerMock) UpdateVersion(id string, version *models.Version) error {
	if mock.UpdateVersionFunc == nil {
		panic("moq: StorerMock.UpdateVersionFunc is nil but Storer.UpdateVersion was just called")
	}
	callInfo := struct {
		Id      string
		Version *models.Version
	}{
		Id:      id,
		Version: version,
	}
	lockStorerMockUpdateVersion.Lock()
	mock.calls.UpdateVersion = append(mock.calls.UpdateVersion, callInfo)
	lockStorerMockUpdateVersion.Unlock()
	return mock.UpdateVersionFunc(id, version)
}

// UpdateVersionCalls gets all the calls that were made to UpdateVersion.
// Check the length with:
//     len(mockedStorer.UpdateVersionCalls())
func (mock *StorerMock) UpdateVersionCalls() []struct {
	Id      string
	Version *models.Version
} {
	var calls []struct {
		Id      string
		Version *models.Version
	}
	lockStorerMockUpdateVersion.RLock()
	calls = mock.calls.UpdateVersion
	lockStorerMockUpdateVersion.RUnlock()
	return calls
}

// UpsertContact calls UpsertContactFunc.
func (mock *StorerMock) UpsertContact(id string, update interface{}) error {
	if mock.UpsertContactFunc == nil {
		panic("moq: StorerMock.UpsertContactFunc is nil but Storer.UpsertContact was just called")
	}
	callInfo := struct {
		Id     string
		Update interface{}
	}{
		Id:     id,
		Update: update,
	}
	lockStorerMockUpsertContact.Lock()
	mock.calls.UpsertContact = append(mock.calls.UpsertContact, callInfo)
	lockStorerMockUpsertContact.Unlock()
	return mock.UpsertContactFunc(id, update)
}

// UpsertContactCalls gets all the calls that were made to UpsertContact.
// Check the length with:
//     len(mockedStorer.UpsertContactCalls())
func (mock *StorerMock) UpsertContactCalls() []struct {
	Id     string
	Update interface{}
} {
	var calls []struct {
		Id     string
		Update interface{}
	}
	lockStorerMockUpsertContact.RLock()
	calls = mock.calls.UpsertContact
	lockStorerMockUpsertContact.RUnlock()
	return calls
}

// UpsertDataset calls UpsertDatasetFunc.
func (mock *StorerMock) UpsertDataset(id string, datasetDoc *models.DatasetUpdate) error {
	if mock.UpsertDatasetFunc == nil {
		panic("moq: StorerMock.UpsertDatasetFunc is nil but Storer.UpsertDataset was just called")
	}
	callInfo := struct {
		Id         string
		DatasetDoc *models.DatasetUpdate
	}{
		Id:         id,
		DatasetDoc: datasetDoc,
	}
	lockStorerMockUpsertDataset.Lock()
	mock.calls.UpsertDataset = append(mock.calls.UpsertDataset, callInfo)
	lockStorerMockUpsertDataset.Unlock()
	return mock.UpsertDatasetFunc(id, datasetDoc)
}

// UpsertDatasetCalls gets all the calls that were made to UpsertDataset.
// Check the length with:
//     len(mockedStorer.UpsertDatasetCalls())
func (mock *StorerMock) UpsertDatasetCalls() []struct {
	Id         string
	DatasetDoc *models.DatasetUpdate
} {
	var calls []struct {
		Id         string
		DatasetDoc *models.DatasetUpdate
	}
	lockStorerMockUpsertDataset.RLock()
	calls = mock.calls.UpsertDataset
	lockStorerMockUpsertDataset.RUnlock()
	return calls
}

// UpsertEdition calls UpsertEditionFunc.
func (mock *StorerMock) UpsertEdition(id string, editionDoc *models.Edition) error {
	if mock.UpsertEditionFunc == nil {
		panic("moq: StorerMock.UpsertEditionFunc is nil but Storer.UpsertEdition was just called")
	}
	callInfo := struct {
		Id         string
		EditionDoc *models.Edition
	}{
		Id:         id,
		EditionDoc: editionDoc,
	}
	lockStorerMockUpsertEdition.Lock()
	mock.calls.UpsertEdition = append(mock.calls.UpsertEdition, callInfo)
	lockStorerMockUpsertEdition.Unlock()
	return mock.UpsertEditionFunc(id, editionDoc)
}

// UpsertEditionCalls gets all the calls that were made to UpsertEdition.
// Check the length with:
//     len(mockedStorer.UpsertEditionCalls())
func (mock *StorerMock) UpsertEditionCalls() []struct {
	Id         string
	EditionDoc *models.Edition
} {
	var calls []struct {
		Id         string
		EditionDoc *models.Edition
	}
	lockStorerMockUpsertEdition.RLock()
	calls = mock.calls.UpsertEdition
	lockStorerMockUpsertEdition.RUnlock()
	return calls
}

// UpsertVersion calls UpsertVersionFunc.
func (mock *StorerMock) UpsertVersion(id string, versionDoc *models.Version) error {
	if mock.UpsertVersionFunc == nil {
		panic("moq: StorerMock.UpsertVersionFunc is nil but Storer.UpsertVersion was just called")
	}
	callInfo := struct {
		Id         string
		VersionDoc *models.Version
	}{
		Id:         id,
		VersionDoc: versionDoc,
	}
	lockStorerMockUpsertVersion.Lock()
	mock.calls.UpsertVersion = append(mock.calls.UpsertVersion, callInfo)
	lockStorerMockUpsertVersion.Unlock()
	return mock.UpsertVersionFunc(id, versionDoc)
}

// UpsertVersionCalls gets all the calls that were made to UpsertVersion.
// Check the length with:
//     len(mockedStorer.UpsertVersionCalls())
func (mock *StorerMock) UpsertVersionCalls() []struct {
	Id         string
	VersionDoc *models.Version
} {
	var calls []struct {
		Id         string
		VersionDoc *models.Version
	}
	lockStorerMockUpsertVersion.RLock()
	calls = mock.calls.UpsertVersion
	lockStorerMockUpsertVersion.RUnlock()
	return calls
}
