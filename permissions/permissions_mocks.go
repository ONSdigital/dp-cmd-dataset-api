// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package permissions

import (
	"sync"
)

var (
	lockPolicyMockCheckCaller sync.RWMutex
)

// PolicyMock is a mock implementation of Policy.
//
//     func TestSomethingThatUsesPolicy(t *testing.T) {
//
//         // make and configure a mocked Policy
//         mockedPolicy := &PolicyMock{
//             CheckCallerFunc: func(serviceToken string, userToken string, collectionID string, datasetID string) (bool, error) {
// 	               panic("TODO: mock out the CheckCaller method")
//             },
//         }
//
//         // TODO: use mockedPolicy in code that requires Policy
//         //       and then make assertions.
//
//     }
type PolicyMock struct {
	// CheckCallerFunc mocks the CheckCaller method.
	CheckCallerFunc func(serviceToken string, userToken string, collectionID string, datasetID string) (bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// CheckCaller holds details about calls to the CheckCaller method.
		CheckCaller []struct {
			// ServiceToken is the serviceToken argument value.
			ServiceToken string
			// UserToken is the userToken argument value.
			UserToken string
			// CollectionID is the collectionID argument value.
			CollectionID string
			// DatasetID is the datasetID argument value.
			DatasetID string
		}
	}
}

// CheckCaller calls CheckCallerFunc.
func (mock *PolicyMock) CheckCaller(serviceToken string, userToken string, collectionID string, datasetID string) (bool, error) {
	if mock.CheckCallerFunc == nil {
		panic("moq: PolicyMock.CheckCallerFunc is nil but Policy.CheckCaller was just called")
	}
	callInfo := struct {
		ServiceToken string
		UserToken    string
		CollectionID string
		DatasetID    string
	}{
		ServiceToken: serviceToken,
		UserToken:    userToken,
		CollectionID: collectionID,
		DatasetID:    datasetID,
	}
	lockPolicyMockCheckCaller.Lock()
	mock.calls.CheckCaller = append(mock.calls.CheckCaller, callInfo)
	lockPolicyMockCheckCaller.Unlock()
	return mock.CheckCallerFunc(serviceToken, userToken, collectionID, datasetID)
}

// CheckCallerCalls gets all the calls that were made to CheckCaller.
// Check the length with:
//     len(mockedPolicy.CheckCallerCalls())
func (mock *PolicyMock) CheckCallerCalls() []struct {
	ServiceToken string
	UserToken    string
	CollectionID string
	DatasetID    string
} {
	var calls []struct {
		ServiceToken string
		UserToken    string
		CollectionID string
		DatasetID    string
	}
	lockPolicyMockCheckCaller.RLock()
	calls = mock.calls.CheckCaller
	lockPolicyMockCheckCaller.RUnlock()
	return calls
}
