// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package permissions

import (
	"context"
	"net/http"
	"sync"
)

var (
	lockPolicyMockIsSatisfied sync.RWMutex
)

// PolicyMock is a mock implementation of Policy.
//
//     func TestSomethingThatUsesPolicy(t *testing.T) {
//
//         // make and configure a mocked Policy
//         mockedPolicy := &PolicyMock{
//             IsSatisfiedFunc: func(ctx context.Context, callerPerms *CallerPermissions, r *http.Request) bool {
// 	               panic("TODO: mock out the IsSatisfied method")
//             },
//         }
//
//         // TODO: use mockedPolicy in code that requires Policy
//         //       and then make assertions.
//
//     }
type PolicyMock struct {
	// IsSatisfiedFunc mocks the IsSatisfied method.
	IsSatisfiedFunc func(ctx context.Context, callerPerms *CallerPermissions, r *http.Request) bool

	// calls tracks calls to the methods.
	calls struct {
		// IsSatisfied holds details about calls to the IsSatisfied method.
		IsSatisfied []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CallerPerms is the callerPerms argument value.
			CallerPerms *CallerPermissions
			// R is the r argument value.
			R *http.Request
		}
	}
}

// IsSatisfied calls IsSatisfiedFunc.
func (mock *PolicyMock) IsSatisfied(ctx context.Context, callerPerms *CallerPermissions, r *http.Request) bool {
	if mock.IsSatisfiedFunc == nil {
		panic("moq: PolicyMock.IsSatisfiedFunc is nil but Policy.IsSatisfied was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		CallerPerms *CallerPermissions
		R           *http.Request
	}{
		Ctx:         ctx,
		CallerPerms: callerPerms,
		R:           r,
	}
	lockPolicyMockIsSatisfied.Lock()
	mock.calls.IsSatisfied = append(mock.calls.IsSatisfied, callInfo)
	lockPolicyMockIsSatisfied.Unlock()
	return mock.IsSatisfiedFunc(ctx, callerPerms, r)
}

// IsSatisfiedCalls gets all the calls that were made to IsSatisfied.
// Check the length with:
//     len(mockedPolicy.IsSatisfiedCalls())
func (mock *PolicyMock) IsSatisfiedCalls() []struct {
	Ctx         context.Context
	CallerPerms *CallerPermissions
	R           *http.Request
} {
	var calls []struct {
		Ctx         context.Context
		CallerPerms *CallerPermissions
		R           *http.Request
	}
	lockPolicyMockIsSatisfied.RLock()
	calls = mock.calls.IsSatisfied
	lockPolicyMockIsSatisfied.RUnlock()
	return calls
}

var (
	lockClientMockGet sync.RWMutex
)

// ClientMock is a mock implementation of Client.
//
//     func TestSomethingThatUsesClient(t *testing.T) {
//
//         // make and configure a mocked Client
//         mockedClient := &ClientMock{
//             GetFunc: func(serviceToken string, userToken string, collectionID string, datasetID string) (*CallerPermissions, error) {
// 	               panic("TODO: mock out the Get method")
//             },
//         }
//
//         // TODO: use mockedClient in code that requires Client
//         //       and then make assertions.
//
//     }
type ClientMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(serviceToken string, userToken string, collectionID string, datasetID string) (*CallerPermissions, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// ServiceToken is the serviceToken argument value.
			ServiceToken string
			// UserToken is the userToken argument value.
			UserToken string
			// CollectionID is the collectionID argument value.
			CollectionID string
			// DatasetID is the datasetID argument value.
			DatasetID string
		}
	}
}

// Get calls GetFunc.
func (mock *ClientMock) Get(serviceToken string, userToken string, collectionID string, datasetID string) (*CallerPermissions, error) {
	if mock.GetFunc == nil {
		panic("moq: ClientMock.GetFunc is nil but Client.Get was just called")
	}
	callInfo := struct {
		ServiceToken string
		UserToken    string
		CollectionID string
		DatasetID    string
	}{
		ServiceToken: serviceToken,
		UserToken:    userToken,
		CollectionID: collectionID,
		DatasetID:    datasetID,
	}
	lockClientMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockClientMockGet.Unlock()
	return mock.GetFunc(serviceToken, userToken, collectionID, datasetID)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedClient.GetCalls())
func (mock *ClientMock) GetCalls() []struct {
	ServiceToken string
	UserToken    string
	CollectionID string
	DatasetID    string
} {
	var calls []struct {
		ServiceToken string
		UserToken    string
		CollectionID string
		DatasetID    string
	}
	lockClientMockGet.RLock()
	calls = mock.calls.Get
	lockClientMockGet.RUnlock()
	return calls
}
