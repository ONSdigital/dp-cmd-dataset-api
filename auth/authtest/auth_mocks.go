// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package authtest

import (
	"github.com/ONSdigital/dp-dataset-api/auth"
	"sync"
)

var (
	lockPermissionAuthenticatorMockCheck sync.RWMutex
)

// PermissionAuthenticatorMock is a mock implementation of PermissionAuthenticator.
//
//     func TestSomethingThatUsesPermissionAuthenticator(t *testing.T) {
//
//         // make and configure a mocked PermissionAuthenticator
//         mockedPermissionAuthenticator := &PermissionAuthenticatorMock{
//             CheckFunc: func(required auth.CRUD, serviceToken string, userToken string, collectionID string, datasetID string) (int, error) {
// 	               panic("TODO: mock out the Check method")
//             },
//         }
//
//         // TODO: use mockedPermissionAuthenticator in code that requires PermissionAuthenticator
//         //       and then make assertions.
//
//     }
type PermissionAuthenticatorMock struct {
	// CheckFunc mocks the Check method.
	CheckFunc func(required auth.CRUD, serviceToken string, userToken string, collectionID string, datasetID string) (int, error)

	// calls tracks calls to the methods.
	calls struct {
		// Check holds details about calls to the Check method.
		Check []struct {
			// Required is the required argument value.
			Required auth.CRUD
			// ServiceToken is the serviceToken argument value.
			ServiceToken string
			// UserToken is the userToken argument value.
			UserToken string
			// CollectionID is the collectionID argument value.
			CollectionID string
			// DatasetID is the datasetID argument value.
			DatasetID string
		}
	}
}

// Check calls CheckFunc.
func (mock *PermissionAuthenticatorMock) Check(required auth.CRUD, serviceToken string, userToken string, collectionID string, datasetID string) (int, error) {
	if mock.CheckFunc == nil {
		panic("moq: PermissionAuthenticatorMock.CheckFunc is nil but PermissionAuthenticator.Check was just called")
	}
	callInfo := struct {
		Required     auth.CRUD
		ServiceToken string
		UserToken    string
		CollectionID string
		DatasetID    string
	}{
		Required:     required,
		ServiceToken: serviceToken,
		UserToken:    userToken,
		CollectionID: collectionID,
		DatasetID:    datasetID,
	}
	lockPermissionAuthenticatorMockCheck.Lock()
	mock.calls.Check = append(mock.calls.Check, callInfo)
	lockPermissionAuthenticatorMockCheck.Unlock()
	return mock.CheckFunc(required, serviceToken, userToken, collectionID, datasetID)
}

// CheckCalls gets all the calls that were made to Check.
// Check the length with:
//     len(mockedPermissionAuthenticator.CheckCalls())
func (mock *PermissionAuthenticatorMock) CheckCalls() []struct {
	Required     auth.CRUD
	ServiceToken string
	UserToken    string
	CollectionID string
	DatasetID    string
} {
	var calls []struct {
		Required     auth.CRUD
		ServiceToken string
		UserToken    string
		CollectionID string
		DatasetID    string
	}
	lockPermissionAuthenticatorMockCheck.RLock()
	calls = mock.calls.Check
	lockPermissionAuthenticatorMockCheck.RUnlock()
	return calls
}
